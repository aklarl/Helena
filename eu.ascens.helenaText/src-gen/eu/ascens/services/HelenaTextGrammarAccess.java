/*
 * generated by Xtext
 */
package eu.ascens.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class HelenaTextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cHeadPkgAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHeadPkgPackageDeclarationParserRuleCall_0 = (RuleCall)cHeadPkgAssignment.eContents().get(0);
		
		//////////// MODEL /////////////
		// Model:
		//	headPkg=PackageDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//headPkg=PackageDeclaration
		public Assignment getHeadPkgAssignment() { return cHeadPkgAssignment; }

		//PackageDeclaration
		public RuleCall getHeadPkgPackageDeclarationParserRuleCall_0() { return cHeadPkgPackageDeclarationParserRuleCall_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cCompTypesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCompTypesComponentTypeParserRuleCall_0_3_0 = (RuleCall)cCompTypesAssignment_0_3.eContents().get(0);
		private final Assignment cRoleTypesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRoleTypesRoleTypeParserRuleCall_1_0 = (RuleCall)cRoleTypesAssignment_1.eContents().get(0);
		private final Assignment cEnsStructsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cEnsStructsEnsembleStructureParserRuleCall_2_0 = (RuleCall)cEnsStructsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Assignment cRoleBehaviorsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRoleBehaviorsRoleBehaviorParserRuleCall_3_0_0 = (RuleCall)cRoleBehaviorsAssignment_3_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" compTypes+=ComponentType* & roleTypes+=RoleType* & ensStructs+=EnsembleStructure* &
		//	roleBehaviors+=RoleBehavior* "}";
		@Override public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" compTypes+=ComponentType* & roleTypes+=RoleType* & ensStructs+=EnsembleStructure* &
		//roleBehaviors+=RoleBehavior* "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"package" name=QualifiedName "{" compTypes+=ComponentType*
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//compTypes+=ComponentType*
		public Assignment getCompTypesAssignment_0_3() { return cCompTypesAssignment_0_3; }

		//ComponentType
		public RuleCall getCompTypesComponentTypeParserRuleCall_0_3_0() { return cCompTypesComponentTypeParserRuleCall_0_3_0; }

		//roleTypes+=RoleType*
		public Assignment getRoleTypesAssignment_1() { return cRoleTypesAssignment_1; }

		//RoleType
		public RuleCall getRoleTypesRoleTypeParserRuleCall_1_0() { return cRoleTypesRoleTypeParserRuleCall_1_0; }

		//ensStructs+=EnsembleStructure*
		public Assignment getEnsStructsAssignment_2() { return cEnsStructsAssignment_2; }

		//EnsembleStructure
		public RuleCall getEnsStructsEnsembleStructureParserRuleCall_2_0() { return cEnsStructsEnsembleStructureParserRuleCall_2_0; }

		//roleBehaviors+=RoleBehavior* "}"
		public Group getGroup_3() { return cGroup_3; }

		//roleBehaviors+=RoleBehavior*
		public Assignment getRoleBehaviorsAssignment_3_0() { return cRoleBehaviorsAssignment_3_0; }

		//RoleBehavior
		public RuleCall getRoleBehaviorsRoleBehaviorParserRuleCall_3_0_0() { return cRoleBehaviorsRoleBehaviorParserRuleCall_3_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}

	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAttrsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cAttrsComponentAttributeTypeParserRuleCall_3_0_0 = (RuleCall)cAttrsAssignment_3_0.eContents().get(0);
		private final Assignment cAssocsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cAssocsComponentAssociationTypeParserRuleCall_3_1_0 = (RuleCall)cAssocsAssignment_3_1.eContents().get(0);
		private final Assignment cOpsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cOpsOperationTypeParserRuleCall_3_2_0 = (RuleCall)cOpsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//////////// COMPONENT TYPE /////////////
		// ComponentType:
		//	"componentType" name=ValidID "{" (attrs+=ComponentAttributeType | assocs+=ComponentAssociationType |
		//	ops+=OperationType)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"componentType" name=ValidID "{" (attrs+=ComponentAttributeType | assocs+=ComponentAssociationType |
		//ops+=OperationType)* "}"
		public Group getGroup() { return cGroup; }

		//"componentType"
		public Keyword getComponentTypeKeyword_0() { return cComponentTypeKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(attrs+=ComponentAttributeType | assocs+=ComponentAssociationType | ops+=OperationType)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//attrs+=ComponentAttributeType
		public Assignment getAttrsAssignment_3_0() { return cAttrsAssignment_3_0; }

		//ComponentAttributeType
		public RuleCall getAttrsComponentAttributeTypeParserRuleCall_3_0_0() { return cAttrsComponentAttributeTypeParserRuleCall_3_0_0; }

		//assocs+=ComponentAssociationType
		public Assignment getAssocsAssignment_3_1() { return cAssocsAssignment_3_1; }

		//ComponentAssociationType
		public RuleCall getAssocsComponentAssociationTypeParserRuleCall_3_1_0() { return cAssocsComponentAssociationTypeParserRuleCall_3_1_0; }

		//ops+=OperationType
		public Assignment getOpsAssignment_3_2() { return cOpsAssignment_3_2; }

		//OperationType
		public RuleCall getOpsOperationTypeParserRuleCall_3_2_0() { return cOpsOperationTypeParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AbstractComponentFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractComponentFieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentAttributeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentAssociationTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractComponentFieldType:
		//	ComponentAttributeType | ComponentAssociationType;
		@Override public ParserRule getRule() { return rule; }

		//ComponentAttributeType | ComponentAssociationType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentAttributeType
		public RuleCall getComponentAttributeTypeParserRuleCall_0() { return cComponentAttributeTypeParserRuleCall_0; }

		//ComponentAssociationType
		public RuleCall getComponentAssociationTypeParserRuleCall_1() { return cComponentAssociationTypeParserRuleCall_1; }
	}

	public class ComponentAttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentAttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentAttributeType:
		//	"attr" type=JvmTypeReference name=ValidID ";";
		@Override public ParserRule getRule() { return rule; }

		//"attr" type=JvmTypeReference name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//"attr"
		public Keyword getAttrKeyword_0() { return cAttrKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ComponentAssociationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentAssociationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeComponentTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeComponentTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeComponentTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentAssociationType:
		//	"assoc" type=[ComponentType] name=ValidID ";";
		@Override public ParserRule getRule() { return rule; }

		//"assoc" type=[ComponentType] name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//"assoc"
		public Keyword getAssocKeyword_0() { return cAssocKeyword_0; }

		//type=[ComponentType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ComponentType]
		public CrossReference getTypeComponentTypeCrossReference_1_0() { return cTypeComponentTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeComponentTypeIDTerminalRuleCall_1_0_1() { return cTypeComponentTypeIDTerminalRuleCall_1_0_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class OperationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cFormalDataParamsBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_3_0 = (RuleCall)cFormalDataParamsBlockAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationType:
		//	"op" returnType=JvmTypeReference name=ValidID formalDataParamsBlock=FormalDataParamsBlock ";";
		@Override public ParserRule getRule() { return rule; }

		//"op" returnType=JvmTypeReference name=ValidID formalDataParamsBlock=FormalDataParamsBlock ";"
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//formalDataParamsBlock=FormalDataParamsBlock
		public Assignment getFormalDataParamsBlockAssignment_3() { return cFormalDataParamsBlockAssignment_3; }

		//FormalDataParamsBlock
		public RuleCall getFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_3_0() { return cFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RoleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOverKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCompTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCompTypesComponentTypeCrossReference_3_0 = (CrossReference)cCompTypesAssignment_3.eContents().get(0);
		private final RuleCall cCompTypesComponentTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cCompTypesComponentTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCompTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cCompTypesComponentTypeCrossReference_4_1_0 = (CrossReference)cCompTypesAssignment_4_1.eContents().get(0);
		private final RuleCall cCompTypesComponentTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cCompTypesComponentTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cRoleattrsAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cRoleattrsRoleAttributeTypeParserRuleCall_6_0_0 = (RuleCall)cRoleattrsAssignment_6_0.eContents().get(0);
		private final Assignment cRolemsgsAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cRolemsgsMessageTypeParserRuleCall_6_1_0 = (RuleCall)cRolemsgsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/////////////// ROLE TYPE /////////////////
		// RoleType:
		//	"roleType" name=ValidID "over" compTypes+=[ComponentType] ("," compTypes+=[ComponentType])* "{"
		//	(roleattrs+=RoleAttributeType | rolemsgs+=MessageType)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"roleType" name=ValidID "over" compTypes+=[ComponentType] ("," compTypes+=[ComponentType])* "{"
		//(roleattrs+=RoleAttributeType | rolemsgs+=MessageType)* "}"
		public Group getGroup() { return cGroup; }

		//"roleType"
		public Keyword getRoleTypeKeyword_0() { return cRoleTypeKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"over"
		public Keyword getOverKeyword_2() { return cOverKeyword_2; }

		//compTypes+=[ComponentType]
		public Assignment getCompTypesAssignment_3() { return cCompTypesAssignment_3; }

		//[ComponentType]
		public CrossReference getCompTypesComponentTypeCrossReference_3_0() { return cCompTypesComponentTypeCrossReference_3_0; }

		//ID
		public RuleCall getCompTypesComponentTypeIDTerminalRuleCall_3_0_1() { return cCompTypesComponentTypeIDTerminalRuleCall_3_0_1; }

		//("," compTypes+=[ComponentType])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//compTypes+=[ComponentType]
		public Assignment getCompTypesAssignment_4_1() { return cCompTypesAssignment_4_1; }

		//[ComponentType]
		public CrossReference getCompTypesComponentTypeCrossReference_4_1_0() { return cCompTypesComponentTypeCrossReference_4_1_0; }

		//ID
		public RuleCall getCompTypesComponentTypeIDTerminalRuleCall_4_1_0_1() { return cCompTypesComponentTypeIDTerminalRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(roleattrs+=RoleAttributeType | rolemsgs+=MessageType)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//roleattrs+=RoleAttributeType
		public Assignment getRoleattrsAssignment_6_0() { return cRoleattrsAssignment_6_0; }

		//RoleAttributeType
		public RuleCall getRoleattrsRoleAttributeTypeParserRuleCall_6_0_0() { return cRoleattrsRoleAttributeTypeParserRuleCall_6_0_0; }

		//rolemsgs+=MessageType
		public Assignment getRolemsgsAssignment_6_1() { return cRolemsgsAssignment_6_1; }

		//MessageType
		public RuleCall getRolemsgsMessageTypeParserRuleCall_6_1_0() { return cRolemsgsMessageTypeParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class RoleAttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleAttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleattrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RoleAttributeType:
		//	"roleattr" type=JvmTypeReference name=ValidID ";";
		@Override public ParserRule getRule() { return rule; }

		//"roleattr" type=JvmTypeReference name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//"roleattr"
		public Keyword getRoleattrKeyword_0() { return cRoleattrKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRolemsgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionMsgDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cFormalRoleParamsBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalRoleParamsBlockFormalRoleParamsBlockParserRuleCall_3_0 = (RuleCall)cFormalRoleParamsBlockAssignment_3.eContents().get(0);
		private final Assignment cFormalDataParamsBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_4_0 = (RuleCall)cFormalDataParamsBlockAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MessageType:
		//	"rolemsg" direction=MsgDirection name=ValidID formalRoleParamsBlock=FormalRoleParamsBlock
		//	formalDataParamsBlock=FormalDataParamsBlock ";";
		@Override public ParserRule getRule() { return rule; }

		//"rolemsg" direction=MsgDirection name=ValidID formalRoleParamsBlock=FormalRoleParamsBlock
		//formalDataParamsBlock=FormalDataParamsBlock ";"
		public Group getGroup() { return cGroup; }

		//"rolemsg"
		public Keyword getRolemsgKeyword_0() { return cRolemsgKeyword_0; }

		//direction=MsgDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//MsgDirection
		public RuleCall getDirectionMsgDirectionEnumRuleCall_1_0() { return cDirectionMsgDirectionEnumRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//formalRoleParamsBlock=FormalRoleParamsBlock
		public Assignment getFormalRoleParamsBlockAssignment_3() { return cFormalRoleParamsBlockAssignment_3; }

		//FormalRoleParamsBlock
		public RuleCall getFormalRoleParamsBlockFormalRoleParamsBlockParserRuleCall_3_0() { return cFormalRoleParamsBlockFormalRoleParamsBlockParserRuleCall_3_0; }

		//formalDataParamsBlock=FormalDataParamsBlock
		public Assignment getFormalDataParamsBlockAssignment_4() { return cFormalDataParamsBlockAssignment_4; }

		//FormalDataParamsBlock
		public RuleCall getFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_4_0() { return cFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class EnsembleStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnsembleStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnsembleStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRtWithMultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRtWithMultRoleTypeWithMultiplicityParserRuleCall_3_0 = (RuleCall)cRtWithMultAssignment_3.eContents().get(0);
		private final Assignment cRtWithMultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRtWithMultRoleTypeWithMultiplicityParserRuleCall_4_0 = (RuleCall)cRtWithMultAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////// ENSEMBLE STRUCTURE /////////////
		// EnsembleStructure:
		//	"ensembleStructure" name=ValidID "{" rtWithMult+=RoleTypeWithMultiplicity rtWithMult+=RoleTypeWithMultiplicity* "}";
		@Override public ParserRule getRule() { return rule; }

		//"ensembleStructure" name=ValidID "{" rtWithMult+=RoleTypeWithMultiplicity rtWithMult+=RoleTypeWithMultiplicity* "}"
		public Group getGroup() { return cGroup; }

		//"ensembleStructure"
		public Keyword getEnsembleStructureKeyword_0() { return cEnsembleStructureKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rtWithMult+=RoleTypeWithMultiplicity
		public Assignment getRtWithMultAssignment_3() { return cRtWithMultAssignment_3; }

		//RoleTypeWithMultiplicity
		public RuleCall getRtWithMultRoleTypeWithMultiplicityParserRuleCall_3_0() { return cRtWithMultRoleTypeWithMultiplicityParserRuleCall_3_0; }

		//rtWithMult+=RoleTypeWithMultiplicity*
		public Assignment getRtWithMultAssignment_4() { return cRtWithMultAssignment_4; }

		//RoleTypeWithMultiplicity
		public RuleCall getRtWithMultRoleTypeWithMultiplicityParserRuleCall_4_0() { return cRtWithMultRoleTypeWithMultiplicityParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RoleTypeWithMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleTypeWithMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoleTypeRoleTypeCrossReference_1_0 = (CrossReference)cRoleTypeAssignment_1.eContents().get(0);
		private final RuleCall cRoleTypeRoleTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cRoleTypeRoleTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinMultElemParserRuleCall_5_0 = (RuleCall)cMinAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cMaxKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMaxAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMaxMultElemParserRuleCall_9_0 = (RuleCall)cMaxAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cCapKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cCapacityAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cCapacityINTTerminalRuleCall_13_0 = (RuleCall)cCapacityAssignment_13.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//RoleTypeWithMultiplicity:
		//	"<" roleType=[RoleType] "," "min" "=" min=MultElem "," "max" "=" max=MultElem "," "cap" "=" capacity=INT ">" ";";
		@Override public ParserRule getRule() { return rule; }

		//"<" roleType=[RoleType] "," "min" "=" min=MultElem "," "max" "=" max=MultElem "," "cap" "=" capacity=INT ">" ";"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//roleType=[RoleType]
		public Assignment getRoleTypeAssignment_1() { return cRoleTypeAssignment_1; }

		//[RoleType]
		public CrossReference getRoleTypeRoleTypeCrossReference_1_0() { return cRoleTypeRoleTypeCrossReference_1_0; }

		//ID
		public RuleCall getRoleTypeRoleTypeIDTerminalRuleCall_1_0_1() { return cRoleTypeRoleTypeIDTerminalRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//"min"
		public Keyword getMinKeyword_3() { return cMinKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//min=MultElem
		public Assignment getMinAssignment_5() { return cMinAssignment_5; }

		//MultElem
		public RuleCall getMinMultElemParserRuleCall_5_0() { return cMinMultElemParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//"max"
		public Keyword getMaxKeyword_7() { return cMaxKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//max=MultElem
		public Assignment getMaxAssignment_9() { return cMaxAssignment_9; }

		//MultElem
		public RuleCall getMaxMultElemParserRuleCall_9_0() { return cMaxMultElemParserRuleCall_9_0; }

		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }

		//"cap"
		public Keyword getCapKeyword_11() { return cCapKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//capacity=INT
		public Assignment getCapacityAssignment_13() { return cCapacityAssignment_13; }

		//INT
		public RuleCall getCapacityINTTerminalRuleCall_13_0() { return cCapacityINTTerminalRuleCall_13_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_14() { return cGreaterThanSignKeyword_14; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }
	}

	public class MultElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultElem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MultElem:
		//	"*" | INT;
		@Override public ParserRule getRule() { return rule; }

		//"*" | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RoleBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleBehavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDeclaringRoleBehaviorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRoleBehaviorKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRoleTypeRefAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cRoleTypeRefRoleTypeCrossReference_0_2_0 = (CrossReference)cRoleTypeRefAssignment_0_2.eContents().get(0);
		private final RuleCall cRoleTypeRefRoleTypeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cRoleTypeRefRoleTypeCrossReference_0_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cProcessExprAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cProcessExprProcessExpressionParserRuleCall_0_4_0 = (RuleCall)cProcessExprAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInvokingRoleBehaviorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRoleBehaviorKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRoleTypeRefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cRoleTypeRefRoleTypeCrossReference_1_2_0 = (CrossReference)cRoleTypeRefAssignment_1_2.eContents().get(0);
		private final RuleCall cRoleTypeRefRoleTypeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cRoleTypeRefRoleTypeCrossReference_1_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cProcessInvocationAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cProcessInvocationProcessInvocationParserRuleCall_1_4_0 = (RuleCall)cProcessInvocationAssignment_1_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cProcessesAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cProcessesProcessParserRuleCall_1_6_0 = (RuleCall)cProcessesAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//////////// ROLE BEHAVIORS /////////
		// RoleBehavior:
		//	{DeclaringRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processExpr=ProcessExpression |
		//	{InvokingRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processInvocation=ProcessInvocation "{"
		//	processes+=Process* "}";
		@Override public ParserRule getRule() { return rule; }

		//{DeclaringRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processExpr=ProcessExpression | {InvokingRoleBehavior}
		//"roleBehavior" roleTypeRef=[RoleType] "=" processInvocation=ProcessInvocation "{" processes+=Process* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DeclaringRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processExpr=ProcessExpression
		public Group getGroup_0() { return cGroup_0; }

		//{DeclaringRoleBehavior}
		public Action getDeclaringRoleBehaviorAction_0_0() { return cDeclaringRoleBehaviorAction_0_0; }

		//"roleBehavior"
		public Keyword getRoleBehaviorKeyword_0_1() { return cRoleBehaviorKeyword_0_1; }

		//roleTypeRef=[RoleType]
		public Assignment getRoleTypeRefAssignment_0_2() { return cRoleTypeRefAssignment_0_2; }

		//[RoleType]
		public CrossReference getRoleTypeRefRoleTypeCrossReference_0_2_0() { return cRoleTypeRefRoleTypeCrossReference_0_2_0; }

		//ID
		public RuleCall getRoleTypeRefRoleTypeIDTerminalRuleCall_0_2_0_1() { return cRoleTypeRefRoleTypeIDTerminalRuleCall_0_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//processExpr=ProcessExpression
		public Assignment getProcessExprAssignment_0_4() { return cProcessExprAssignment_0_4; }

		//ProcessExpression
		public RuleCall getProcessExprProcessExpressionParserRuleCall_0_4_0() { return cProcessExprProcessExpressionParserRuleCall_0_4_0; }

		//{InvokingRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processInvocation=ProcessInvocation "{"
		//processes+=Process* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{InvokingRoleBehavior}
		public Action getInvokingRoleBehaviorAction_1_0() { return cInvokingRoleBehaviorAction_1_0; }

		//"roleBehavior"
		public Keyword getRoleBehaviorKeyword_1_1() { return cRoleBehaviorKeyword_1_1; }

		//roleTypeRef=[RoleType]
		public Assignment getRoleTypeRefAssignment_1_2() { return cRoleTypeRefAssignment_1_2; }

		//[RoleType]
		public CrossReference getRoleTypeRefRoleTypeCrossReference_1_2_0() { return cRoleTypeRefRoleTypeCrossReference_1_2_0; }

		//ID
		public RuleCall getRoleTypeRefRoleTypeIDTerminalRuleCall_1_2_0_1() { return cRoleTypeRefRoleTypeIDTerminalRuleCall_1_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//processInvocation=ProcessInvocation
		public Assignment getProcessInvocationAssignment_1_4() { return cProcessInvocationAssignment_1_4; }

		//ProcessInvocation
		public RuleCall getProcessInvocationProcessInvocationParserRuleCall_1_4_0() { return cProcessInvocationProcessInvocationParserRuleCall_1_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }

		//processes+=Process*
		public Assignment getProcessesAssignment_1_6() { return cProcessesAssignment_1_6; }

		//Process
		public RuleCall getProcessesProcessParserRuleCall_1_6_0() { return cProcessesProcessParserRuleCall_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessExprProcessExpressionParserRuleCall_3_0 = (RuleCall)cProcessExprAssignment_3.eContents().get(0);
		
		//Process:
		//	"process" name=ValidID "=" processExpr=ProcessExpression;
		@Override public ParserRule getRule() { return rule; }

		//"process" name=ValidID "=" processExpr=ProcessExpression
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//processExpr=ProcessExpression
		public Assignment getProcessExprAssignment_3() { return cProcessExprAssignment_3; }

		//ProcessExpression
		public RuleCall getProcessExprProcessExpressionParserRuleCall_3_0() { return cProcessExprProcessExpressionParserRuleCall_3_0; }
	}

	public class ProcessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cQuitTermAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cQuitKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cActionPrefixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNondeterministicChoiceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfThenElseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcessInvocationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//////////// PROCESS TERMS /////////
		// ProcessExpression:
		//	{QuitTerm} "quit" | ActionPrefix | NondeterministicChoice | IfThenElse | ProcessInvocation;
		@Override public ParserRule getRule() { return rule; }

		//{QuitTerm} "quit" | ActionPrefix | NondeterministicChoice | IfThenElse | ProcessInvocation
		public Alternatives getAlternatives() { return cAlternatives; }

		//{QuitTerm} "quit"
		public Group getGroup_0() { return cGroup_0; }

		//{QuitTerm}
		public Action getQuitTermAction_0_0() { return cQuitTermAction_0_0; }

		//"quit"
		public Keyword getQuitKeyword_0_1() { return cQuitKeyword_0_1; }

		//ActionPrefix
		public RuleCall getActionPrefixParserRuleCall_1() { return cActionPrefixParserRuleCall_1; }

		//NondeterministicChoice
		public RuleCall getNondeterministicChoiceParserRuleCall_2() { return cNondeterministicChoiceParserRuleCall_2; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_3() { return cIfThenElseParserRuleCall_3; }

		//ProcessInvocation
		public RuleCall getProcessInvocationParserRuleCall_4() { return cProcessInvocationParserRuleCall_4; }
	}

	public class ActionPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcessExprProcessExpressionParserRuleCall_2_0 = (RuleCall)cProcessExprAssignment_2.eContents().get(0);
		
		//ActionPrefix:
		//	action=Action "." processExpr=ProcessExpression;
		@Override public ParserRule getRule() { return rule; }

		//action=Action "." processExpr=ProcessExpression
		public Group getGroup() { return cGroup; }

		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//processExpr=ProcessExpression
		public Assignment getProcessExprAssignment_2() { return cProcessExprAssignment_2; }

		//ProcessExpression
		public RuleCall getProcessExprProcessExpressionParserRuleCall_2_0() { return cProcessExprProcessExpressionParserRuleCall_2_0; }
	}

	public class NondeterministicChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NondeterministicChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstProcessExpressionParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondProcessExpressionParserRuleCall_3_0 = (RuleCall)cSecondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NondeterministicChoice:
		//	"(" first=ProcessExpression "+" second=ProcessExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" first=ProcessExpression "+" second=ProcessExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//first=ProcessExpression
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//ProcessExpression
		public RuleCall getFirstProcessExpressionParserRuleCall_1_0() { return cFirstProcessExpressionParserRuleCall_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//second=ProcessExpression
		public Assignment getSecondAssignment_3() { return cSecondAssignment_3; }

		//ProcessExpression
		public RuleCall getSecondProcessExpressionParserRuleCall_3_0() { return cSecondProcessExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardGuardParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfProcessExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfProcessExprProcessExpressionParserRuleCall_5_0 = (RuleCall)cIfProcessExprAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cElseProcessExprAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElseProcessExprProcessExpressionParserRuleCall_9_0 = (RuleCall)cElseProcessExprAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//IfThenElse:
		//	"if" "(" guard=Guard ")" "{" ifProcessExpr=ProcessExpression "}" "else" "{" elseProcessExpr=ProcessExpression "}";
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" guard=Guard ")" "{" ifProcessExpr=ProcessExpression "}" "else" "{" elseProcessExpr=ProcessExpression "}"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//guard=Guard
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_2_0() { return cGuardGuardParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//ifProcessExpr=ProcessExpression
		public Assignment getIfProcessExprAssignment_5() { return cIfProcessExprAssignment_5; }

		//ProcessExpression
		public RuleCall getIfProcessExprProcessExpressionParserRuleCall_5_0() { return cIfProcessExprProcessExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"else"
		public Keyword getElseKeyword_7() { return cElseKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//elseProcessExpr=ProcessExpression
		public Assignment getElseProcessExprAssignment_9() { return cElseProcessExprAssignment_9; }

		//ProcessExpression
		public RuleCall getElseProcessExprProcessExpressionParserRuleCall_9_0() { return cElseProcessExprProcessExpressionParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ProcessInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessInvocation");
		private final Assignment cProcessAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_0 = (CrossReference)cProcessAssignment.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_0_1 = (RuleCall)cProcessProcessCrossReference_0.eContents().get(1);
		
		//ProcessInvocation:
		//	process=[Process];
		@Override public ParserRule getRule() { return rule; }

		//process=[Process]
		public Assignment getProcessAssignment() { return cProcessAssignment; }

		//[Process]
		public CrossReference getProcessProcessCrossReference_0() { return cProcessProcessCrossReference_0; }

		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_0_1() { return cProcessProcessIDTerminalRuleCall_0_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMessageCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComponentAttributeSetterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRoleAttributeSetterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLabelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/////////// ACTIONS //////////////
		// Action:
		//	AbstractAssignment | AbstractMessageCall | OperationCall | ComponentAttributeSetter | RoleAttributeSetter | Label;
		@Override public ParserRule getRule() { return rule; }

		//AbstractAssignment | AbstractMessageCall | OperationCall | ComponentAttributeSetter | RoleAttributeSetter | Label
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractAssignment
		public RuleCall getAbstractAssignmentParserRuleCall_0() { return cAbstractAssignmentParserRuleCall_0; }

		//AbstractMessageCall
		public RuleCall getAbstractMessageCallParserRuleCall_1() { return cAbstractMessageCallParserRuleCall_1; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_2() { return cOperationCallParserRuleCall_2; }

		//ComponentAttributeSetter
		public RuleCall getComponentAttributeSetterParserRuleCall_3() { return cComponentAttributeSetterParserRuleCall_3; }

		//RoleAttributeSetter
		public RuleCall getRoleAttributeSetterParserRuleCall_4() { return cRoleAttributeSetterParserRuleCall_4; }

		//Label
		public RuleCall getLabelParserRuleCall_5() { return cLabelParserRuleCall_5; }
	}

	public class AbstractAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGetAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRoleInstAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRoleInstRoleInstanceVariableParserRuleCall_0_1_0 = (RuleCall)cRoleInstAssignment_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cGetKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cRoleTypeRefAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cRoleTypeRefRoleTypeCrossReference_0_5_0 = (CrossReference)cRoleTypeRefAssignment_0_5.eContents().get(0);
		private final RuleCall cRoleTypeRefRoleTypeIDTerminalRuleCall_0_5_0_1 = (RuleCall)cRoleTypeRefRoleTypeCrossReference_0_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cCompInstanceAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cCompInstanceComponentInstanceParserRuleCall_0_7_0 = (RuleCall)cCompInstanceAssignment_0_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCreateAssignmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRoleInstAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRoleInstRoleInstanceVariableParserRuleCall_1_1_0 = (RuleCall)cRoleInstAssignment_1_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cCreateKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cRoleTypeRefAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cRoleTypeRefRoleTypeCrossReference_1_5_0 = (CrossReference)cRoleTypeRefAssignment_1_5.eContents().get(0);
		private final RuleCall cRoleTypeRefRoleTypeIDTerminalRuleCall_1_5_0_1 = (RuleCall)cRoleTypeRefRoleTypeCrossReference_1_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cCompInstanceAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cCompInstanceComponentInstanceParserRuleCall_1_7_0 = (RuleCall)cCompInstanceAssignment_1_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		//AbstractAssignment:
		//	{GetAssignment} roleInst=RoleInstanceVariable "<-" "get" "(" roleTypeRef=[RoleType] ","
		//	compInstance=ComponentInstance ")" | {CreateAssignment} roleInst=RoleInstanceVariable "<-" "create" "("
		//	roleTypeRef=[RoleType] "," compInstance=ComponentInstance ")";
		@Override public ParserRule getRule() { return rule; }

		//{GetAssignment} roleInst=RoleInstanceVariable "<-" "get" "(" roleTypeRef=[RoleType] "," compInstance=ComponentInstance
		//")" | {CreateAssignment} roleInst=RoleInstanceVariable "<-" "create" "(" roleTypeRef=[RoleType] ","
		//compInstance=ComponentInstance ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{GetAssignment} roleInst=RoleInstanceVariable "<-" "get" "(" roleTypeRef=[RoleType] "," compInstance=ComponentInstance
		//")"
		public Group getGroup_0() { return cGroup_0; }

		//{GetAssignment}
		public Action getGetAssignmentAction_0_0() { return cGetAssignmentAction_0_0; }

		//roleInst=RoleInstanceVariable
		public Assignment getRoleInstAssignment_0_1() { return cRoleInstAssignment_0_1; }

		//RoleInstanceVariable
		public RuleCall getRoleInstRoleInstanceVariableParserRuleCall_0_1_0() { return cRoleInstRoleInstanceVariableParserRuleCall_0_1_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_2() { return cLessThanSignHyphenMinusKeyword_0_2; }

		//"get"
		public Keyword getGetKeyword_0_3() { return cGetKeyword_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_4() { return cLeftParenthesisKeyword_0_4; }

		//roleTypeRef=[RoleType]
		public Assignment getRoleTypeRefAssignment_0_5() { return cRoleTypeRefAssignment_0_5; }

		//[RoleType]
		public CrossReference getRoleTypeRefRoleTypeCrossReference_0_5_0() { return cRoleTypeRefRoleTypeCrossReference_0_5_0; }

		//ID
		public RuleCall getRoleTypeRefRoleTypeIDTerminalRuleCall_0_5_0_1() { return cRoleTypeRefRoleTypeIDTerminalRuleCall_0_5_0_1; }

		//","
		public Keyword getCommaKeyword_0_6() { return cCommaKeyword_0_6; }

		//compInstance=ComponentInstance
		public Assignment getCompInstanceAssignment_0_7() { return cCompInstanceAssignment_0_7; }

		//ComponentInstance
		public RuleCall getCompInstanceComponentInstanceParserRuleCall_0_7_0() { return cCompInstanceComponentInstanceParserRuleCall_0_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_8() { return cRightParenthesisKeyword_0_8; }

		//{CreateAssignment} roleInst=RoleInstanceVariable "<-" "create" "(" roleTypeRef=[RoleType] ","
		//compInstance=ComponentInstance ")"
		public Group getGroup_1() { return cGroup_1; }

		//{CreateAssignment}
		public Action getCreateAssignmentAction_1_0() { return cCreateAssignmentAction_1_0; }

		//roleInst=RoleInstanceVariable
		public Assignment getRoleInstAssignment_1_1() { return cRoleInstAssignment_1_1; }

		//RoleInstanceVariable
		public RuleCall getRoleInstRoleInstanceVariableParserRuleCall_1_1_0() { return cRoleInstRoleInstanceVariableParserRuleCall_1_1_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1_2() { return cLessThanSignHyphenMinusKeyword_1_2; }

		//"create"
		public Keyword getCreateKeyword_1_3() { return cCreateKeyword_1_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4() { return cLeftParenthesisKeyword_1_4; }

		//roleTypeRef=[RoleType]
		public Assignment getRoleTypeRefAssignment_1_5() { return cRoleTypeRefAssignment_1_5; }

		//[RoleType]
		public CrossReference getRoleTypeRefRoleTypeCrossReference_1_5_0() { return cRoleTypeRefRoleTypeCrossReference_1_5_0; }

		//ID
		public RuleCall getRoleTypeRefRoleTypeIDTerminalRuleCall_1_5_0_1() { return cRoleTypeRefRoleTypeIDTerminalRuleCall_1_5_0_1; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//compInstance=ComponentInstance
		public Assignment getCompInstanceAssignment_1_7() { return cCompInstanceAssignment_1_7; }

		//ComponentInstance
		public RuleCall getCompInstanceComponentInstanceParserRuleCall_1_7_0() { return cCompInstanceComponentInstanceParserRuleCall_1_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_8() { return cRightParenthesisKeyword_1_8; }
	}

	public class AbstractMessageCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMessageCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutgoingMessageCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncomingMessageCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMessageCall:
		//	OutgoingMessageCall | IncomingMessageCall;
		@Override public ParserRule getRule() { return rule; }

		//OutgoingMessageCall | IncomingMessageCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//OutgoingMessageCall
		public RuleCall getOutgoingMessageCallParserRuleCall_0() { return cOutgoingMessageCallParserRuleCall_0; }

		//IncomingMessageCall
		public RuleCall getIncomingMessageCallParserRuleCall_1() { return cIncomingMessageCallParserRuleCall_1; }
	}

	public class OutgoingMessageCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutgoingMessageCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceiverAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReceiverAbstractRoleInstanceReferenceParserRuleCall_0_0 = (RuleCall)cReceiverAssignment_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgNameValidIDParserRuleCall_2_0 = (RuleCall)cMsgNameAssignment_2.eContents().get(0);
		private final Assignment cActualRoleParamsBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActualRoleParamsBlockActualRoleParamsBlockParserRuleCall_3_0 = (RuleCall)cActualRoleParamsBlockAssignment_3.eContents().get(0);
		private final Assignment cActualDataParamsBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActualDataParamsBlockActualDataParamsBlockParserRuleCall_4_0 = (RuleCall)cActualDataParamsBlockAssignment_4.eContents().get(0);
		
		//OutgoingMessageCall:
		//	receiver=AbstractRoleInstanceReference "!" msgName=ValidID actualRoleParamsBlock=ActualRoleParamsBlock
		//	actualDataParamsBlock=ActualDataParamsBlock;
		@Override public ParserRule getRule() { return rule; }

		//receiver=AbstractRoleInstanceReference "!" msgName=ValidID actualRoleParamsBlock=ActualRoleParamsBlock
		//actualDataParamsBlock=ActualDataParamsBlock
		public Group getGroup() { return cGroup; }

		//receiver=AbstractRoleInstanceReference
		public Assignment getReceiverAssignment_0() { return cReceiverAssignment_0; }

		//AbstractRoleInstanceReference
		public RuleCall getReceiverAbstractRoleInstanceReferenceParserRuleCall_0_0() { return cReceiverAbstractRoleInstanceReferenceParserRuleCall_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//msgName=ValidID
		public Assignment getMsgNameAssignment_2() { return cMsgNameAssignment_2; }

		//ValidID
		public RuleCall getMsgNameValidIDParserRuleCall_2_0() { return cMsgNameValidIDParserRuleCall_2_0; }

		//actualRoleParamsBlock=ActualRoleParamsBlock
		public Assignment getActualRoleParamsBlockAssignment_3() { return cActualRoleParamsBlockAssignment_3; }

		//ActualRoleParamsBlock
		public RuleCall getActualRoleParamsBlockActualRoleParamsBlockParserRuleCall_3_0() { return cActualRoleParamsBlockActualRoleParamsBlockParserRuleCall_3_0; }

		//actualDataParamsBlock=ActualDataParamsBlock
		public Assignment getActualDataParamsBlockAssignment_4() { return cActualDataParamsBlockAssignment_4; }

		//ActualDataParamsBlock
		public RuleCall getActualDataParamsBlockActualDataParamsBlockParserRuleCall_4_0() { return cActualDataParamsBlockActualDataParamsBlockParserRuleCall_4_0; }
	}

	public class IncomingMessageCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncomingMessageCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMsgNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMsgNameValidIDParserRuleCall_1_0 = (RuleCall)cMsgNameAssignment_1.eContents().get(0);
		private final Assignment cFormalRoleParamsBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalRoleParamsBlockFormalRoleParamsBlockParserRuleCall_2_0 = (RuleCall)cFormalRoleParamsBlockAssignment_2.eContents().get(0);
		private final Assignment cFormalDataParamsBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_3_0 = (RuleCall)cFormalDataParamsBlockAssignment_3.eContents().get(0);
		
		//IncomingMessageCall:
		//	"?" msgName=ValidID formalRoleParamsBlock=FormalRoleParamsBlock formalDataParamsBlock=FormalDataParamsBlock;
		@Override public ParserRule getRule() { return rule; }

		//"?" msgName=ValidID formalRoleParamsBlock=FormalRoleParamsBlock formalDataParamsBlock=FormalDataParamsBlock
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//msgName=ValidID
		public Assignment getMsgNameAssignment_1() { return cMsgNameAssignment_1; }

		//ValidID
		public RuleCall getMsgNameValidIDParserRuleCall_1_0() { return cMsgNameValidIDParserRuleCall_1_0; }

		//formalRoleParamsBlock=FormalRoleParamsBlock
		public Assignment getFormalRoleParamsBlockAssignment_2() { return cFormalRoleParamsBlockAssignment_2; }

		//FormalRoleParamsBlock
		public RuleCall getFormalRoleParamsBlockFormalRoleParamsBlockParserRuleCall_2_0() { return cFormalRoleParamsBlockFormalRoleParamsBlockParserRuleCall_2_0; }

		//formalDataParamsBlock=FormalDataParamsBlock
		public Assignment getFormalDataParamsBlockAssignment_3() { return cFormalDataParamsBlockAssignment_3; }

		//FormalDataParamsBlock
		public RuleCall getFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_3_0() { return cFormalDataParamsBlockFormalDataParamsBlockParserRuleCall_3_0; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableDataVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cOwnerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpNameValidIDParserRuleCall_2_0 = (RuleCall)cOpNameAssignment_2.eContents().get(0);
		private final Assignment cActualDataParamsBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActualDataParamsBlockActualDataParamsBlockParserRuleCall_3_0 = (RuleCall)cActualDataParamsBlockAssignment_3.eContents().get(0);
		
		//OperationCall:
		//	(variable=DataVariable "=")? "owner." opName=ValidID actualDataParamsBlock=ActualDataParamsBlock;
		@Override public ParserRule getRule() { return rule; }

		//(variable=DataVariable "=")? "owner." opName=ValidID actualDataParamsBlock=ActualDataParamsBlock
		public Group getGroup() { return cGroup; }

		//(variable=DataVariable "=")?
		public Group getGroup_0() { return cGroup_0; }

		//variable=DataVariable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }

		//DataVariable
		public RuleCall getVariableDataVariableParserRuleCall_0_0_0() { return cVariableDataVariableParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"owner."
		public Keyword getOwnerKeyword_1() { return cOwnerKeyword_1; }

		//opName=ValidID
		public Assignment getOpNameAssignment_2() { return cOpNameAssignment_2; }

		//ValidID
		public RuleCall getOpNameValidIDParserRuleCall_2_0() { return cOpNameValidIDParserRuleCall_2_0; }

		//actualDataParamsBlock=ActualDataParamsBlock
		public Assignment getActualDataParamsBlockAssignment_3() { return cActualDataParamsBlockAssignment_3; }

		//ActualDataParamsBlock
		public RuleCall getActualDataParamsBlockActualDataParamsBlockParserRuleCall_3_0() { return cActualDataParamsBlockActualDataParamsBlockParserRuleCall_3_0; }
	}

	public class ComponentAttributeSetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentAttributeSetter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrComponentAttributeTypeReferenceParserRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDataExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ComponentAttributeSetter:
		//	attr=ComponentAttributeTypeReference "=" value=DataExpression;
		@Override public ParserRule getRule() { return rule; }

		//attr=ComponentAttributeTypeReference "=" value=DataExpression
		public Group getGroup() { return cGroup; }

		//attr=ComponentAttributeTypeReference
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }

		//ComponentAttributeTypeReference
		public RuleCall getAttrComponentAttributeTypeReferenceParserRuleCall_0_0() { return cAttrComponentAttributeTypeReferenceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=DataExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DataExpression
		public RuleCall getValueDataExpressionParserRuleCall_2_0() { return cValueDataExpressionParserRuleCall_2_0; }
	}

	public class RoleAttributeSetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleAttributeSetter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrRoleAttributeTypeReferenceParserRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDataExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RoleAttributeSetter:
		//	attr=RoleAttributeTypeReference "=" value=DataExpression;
		@Override public ParserRule getRule() { return rule; }

		//attr=RoleAttributeTypeReference "=" value=DataExpression
		public Group getGroup() { return cGroup; }

		//attr=RoleAttributeTypeReference
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }

		//RoleAttributeTypeReference
		public RuleCall getAttrRoleAttributeTypeReferenceParserRuleCall_0_0() { return cAttrRoleAttributeTypeReferenceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=DataExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DataExpression
		public RuleCall getValueDataExpressionParserRuleCall_2_0() { return cValueDataExpressionParserRuleCall_2_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Label:
		//	name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final RuleCall cOrTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////////////// GUARDS //////////////
		// Guard:
		//	OrTerm;
		@Override public ParserRule getRule() { return rule; }

		//OrTerm
		public RuleCall getOrTermParserRuleCall() { return cOrTermParserRuleCall; }
	}

	public class OrTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrTerm returns Guard:
		//	AndTerm ({OrTerm.left=current} "||" right=AndTerm)*;
		@Override public ParserRule getRule() { return rule; }

		//AndTerm ({OrTerm.left=current} "||" right=AndTerm)*
		public Group getGroup() { return cGroup; }

		//AndTerm
		public RuleCall getAndTermParserRuleCall_0() { return cAndTermParserRuleCall_0; }

		//({OrTerm.left=current} "||" right=AndTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrTerm.left=current}
		public Action getOrTermLeftAction_1_0() { return cOrTermLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=AndTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndTerm
		public RuleCall getRightAndTermParserRuleCall_1_2_0() { return cRightAndTermParserRuleCall_1_2_0; }
	}

	public class AndTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndTerm returns Guard:
		//	EqualityTerm ({AndTerm.left=current} "&&" right=EqualityTerm)*;
		@Override public ParserRule getRule() { return rule; }

		//EqualityTerm ({AndTerm.left=current} "&&" right=EqualityTerm)*
		public Group getGroup() { return cGroup; }

		//EqualityTerm
		public RuleCall getEqualityTermParserRuleCall_0() { return cEqualityTermParserRuleCall_0; }

		//({AndTerm.left=current} "&&" right=EqualityTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndTerm.left=current}
		public Action getAndTermLeftAction_1_0() { return cAndTermLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=EqualityTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EqualityTerm
		public RuleCall getRightEqualityTermParserRuleCall_1_2_0() { return cRightEqualityTermParserRuleCall_1_2_0; }
	}

	public class EqualityTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOpEqualityParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityTerm returns Guard:
		//	NotTerm ({EqualityTerm.left=current} operator=OpEquality right=NotTerm)*;
		@Override public ParserRule getRule() { return rule; }

		//NotTerm ({EqualityTerm.left=current} operator=OpEquality right=NotTerm)*
		public Group getGroup() { return cGroup; }

		//NotTerm
		public RuleCall getNotTermParserRuleCall_0() { return cNotTermParserRuleCall_0; }

		//({EqualityTerm.left=current} operator=OpEquality right=NotTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//{EqualityTerm.left=current}
		public Action getEqualityTermLeftAction_1_0() { return cEqualityTermLeftAction_1_0; }

		//operator=OpEquality
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//OpEquality
		public RuleCall getOperatorOpEqualityParserRuleCall_1_1_0() { return cOperatorOpEqualityParserRuleCall_1_1_0; }

		//right=NotTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//NotTerm
		public RuleCall getRightNotTermParserRuleCall_1_2_0() { return cRightNotTermParserRuleCall_1_2_0; }
	}

	public class NotTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotExclamationMarkKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cAtomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtomAtomParserRuleCall_2_0 = (RuleCall)cAtomAssignment_2.eContents().get(0);
		
		//NotTerm returns Guard:
		//	{NotTerm} not="!"? atom=Atom;
		@Override public ParserRule getRule() { return rule; }

		//{NotTerm} not="!"? atom=Atom
		public Group getGroup() { return cGroup; }

		//{NotTerm}
		public Action getNotTermAction_0() { return cNotTermAction_0; }

		//not="!"?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }

		//"!"
		public Keyword getNotExclamationMarkKeyword_1_0() { return cNotExclamationMarkKeyword_1_0; }

		//atom=Atom
		public Assignment getAtomAssignment_2() { return cAtomAssignment_2; }

		//Atom
		public RuleCall getAtomAtomParserRuleCall_2_0() { return cAtomAtomParserRuleCall_2_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlaysQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGuardInParenthesesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Atom:
		//	DataExpression | PlaysQuery | Relation | GuardInParentheses;
		@Override public ParserRule getRule() { return rule; }

		//DataExpression | PlaysQuery | Relation | GuardInParentheses
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataExpression
		public RuleCall getDataExpressionParserRuleCall_0() { return cDataExpressionParserRuleCall_0; }

		//PlaysQuery
		public RuleCall getPlaysQueryParserRuleCall_1() { return cPlaysQueryParserRuleCall_1; }

		//Relation
		public RuleCall getRelationParserRuleCall_2() { return cRelationParserRuleCall_2; }

		//GuardInParentheses
		public RuleCall getGuardInParenthesesParserRuleCall_3() { return cGuardInParenthesesParserRuleCall_3; }
	}

	public class PlaysQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlaysQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoleTypeRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRoleTypeRefRoleTypeCrossReference_2_0 = (CrossReference)cRoleTypeRefAssignment_2.eContents().get(0);
		private final RuleCall cRoleTypeRefRoleTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cRoleTypeRefRoleTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCompInstanceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCompInstanceComponentInstanceParserRuleCall_4_0 = (RuleCall)cCompInstanceAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PlaysQuery:
		//	"plays" "(" roleTypeRef=[RoleType] "," compInstance=ComponentInstance ")";
		@Override public ParserRule getRule() { return rule; }

		//"plays" "(" roleTypeRef=[RoleType] "," compInstance=ComponentInstance ")"
		public Group getGroup() { return cGroup; }

		//"plays"
		public Keyword getPlaysKeyword_0() { return cPlaysKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//roleTypeRef=[RoleType]
		public Assignment getRoleTypeRefAssignment_2() { return cRoleTypeRefAssignment_2; }

		//[RoleType]
		public CrossReference getRoleTypeRefRoleTypeCrossReference_2_0() { return cRoleTypeRefRoleTypeCrossReference_2_0; }

		//ID
		public RuleCall getRoleTypeRefRoleTypeIDTerminalRuleCall_2_0_1() { return cRoleTypeRefRoleTypeIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//compInstance=ComponentInstance
		public Assignment getCompInstanceAssignment_4() { return cCompInstanceAssignment_4; }

		//ComponentInstance
		public RuleCall getCompInstanceComponentInstanceParserRuleCall_4_0() { return cCompInstanceComponentInstanceParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDataExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOpCompareParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightDataExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Relation:
		//	left=DataExpression operator=OpCompare right=DataExpression;
		@Override public ParserRule getRule() { return rule; }

		//left=DataExpression operator=OpCompare right=DataExpression
		public Group getGroup() { return cGroup; }

		//left=DataExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//DataExpression
		public RuleCall getLeftDataExpressionParserRuleCall_0_0() { return cLeftDataExpressionParserRuleCall_0_0; }

		//operator=OpCompare
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//OpCompare
		public RuleCall getOperatorOpCompareParserRuleCall_1_0() { return cOperatorOpCompareParserRuleCall_1_0; }

		//right=DataExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//DataExpression
		public RuleCall getRightDataExpressionParserRuleCall_2_0() { return cRightDataExpressionParserRuleCall_2_0; }
	}

	public class GuardInParenthesesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardInParentheses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_1_0 = (RuleCall)cGuardAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GuardInParentheses:
		//	"(" guard=Guard ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" guard=Guard ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//guard=Guard
		public Assignment getGuardAssignment_1() { return cGuardAssignment_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_1_0() { return cGuardGuardParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AbstractDataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDataValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractDataValue:
		//	BooleanValue | NumberValue | StringValue;
		@Override public ParserRule getRule() { return rule; }

		//BooleanValue | NumberValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }

		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueXBooleanLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=XBooleanLiteral;
		@Override public ParserRule getRule() { return rule; }

		//value=XBooleanLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//XBooleanLiteral
		public RuleCall getValueXBooleanLiteralParserRuleCall_0() { return cValueXBooleanLiteralParserRuleCall_0; }
	}

	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueXNumberLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//	value=XNumberLiteral;
		@Override public ParserRule getRule() { return rule; }

		//value=XNumberLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//XNumberLiteral
		public RuleCall getValueXNumberLiteralParserRuleCall_0() { return cValueXNumberLiteralParserRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueXStringLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=XStringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//value=XStringLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//XStringLiteral
		public RuleCall getValueXStringLiteralParserRuleCall_0() { return cValueXStringLiteralParserRuleCall_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	"==" | "!=";
		@Override public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	">=" | "<" "=" | ">" | "<";
		@Override public ParserRule getRule() { return rule; }

		//">=" | "<" "=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }

		//"<" "="
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}

	public class ComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentInstance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentAssociationTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOwnerReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////////// COMPONENT INSTANCES ///////////////
		// ComponentInstance:
		//	ComponentAssociationTypeReference | OwnerReference;
		@Override public ParserRule getRule() { return rule; }

		//ComponentAssociationTypeReference | OwnerReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentAssociationTypeReference
		public RuleCall getComponentAssociationTypeReferenceParserRuleCall_0() { return cComponentAssociationTypeReferenceParserRuleCall_0; }

		//OwnerReference
		public RuleCall getOwnerReferenceParserRuleCall_1() { return cOwnerReferenceParserRuleCall_1; }
	}

	public class ComponentAssociationTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentAssociationTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOwnerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefComponentAssociationTypeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefComponentAssociationTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cRefComponentAssociationTypeCrossReference_1_0.eContents().get(1);
		
		//ComponentAssociationTypeReference:
		//	"owner." ref=[ComponentAssociationType];
		@Override public ParserRule getRule() { return rule; }

		//"owner." ref=[ComponentAssociationType]
		public Group getGroup() { return cGroup; }

		//"owner."
		public Keyword getOwnerKeyword_0() { return cOwnerKeyword_0; }

		//ref=[ComponentAssociationType]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ComponentAssociationType]
		public CrossReference getRefComponentAssociationTypeCrossReference_1_0() { return cRefComponentAssociationTypeCrossReference_1_0; }

		//ID
		public RuleCall getRefComponentAssociationTypeIDTerminalRuleCall_1_0_1() { return cRefComponentAssociationTypeIDTerminalRuleCall_1_0_1; }
	}

	public class OwnerReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OwnerReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOwnerReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOwnerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OwnerReference:
		//	{OwnerReference} "owner";
		@Override public ParserRule getRule() { return rule; }

		//{OwnerReference} "owner"
		public Group getGroup() { return cGroup; }

		//{OwnerReference}
		public Action getOwnerReferenceAction_0() { return cOwnerReferenceAction_0; }

		//"owner"
		public Keyword getOwnerKeyword_1() { return cOwnerKeyword_1; }
	}

	public class AbstractRoleInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRoleInstance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRoleInstanceVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormalRoleParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////// ROLE INSTANCES /////////////////
		// AbstractRoleInstance:
		//	RoleInstanceVariable | FormalRoleParam;
		@Override public ParserRule getRule() { return rule; }

		//RoleInstanceVariable | FormalRoleParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//RoleInstanceVariable
		public RuleCall getRoleInstanceVariableParserRuleCall_0() { return cRoleInstanceVariableParserRuleCall_0; }

		//FormalRoleParam
		public RuleCall getFormalRoleParamParserRuleCall_1() { return cFormalRoleParamParserRuleCall_1; }
	}

	public class RoleInstanceVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleInstanceVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RoleInstanceVariable:
		//	name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class FormalRoleParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalRoleParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeRoleTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeRoleTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeRoleTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FormalRoleParam:
		//	type=[RoleType] name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//type=[RoleType] name=ValidID
		public Group getGroup() { return cGroup; }

		//type=[RoleType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[RoleType]
		public CrossReference getTypeRoleTypeCrossReference_0_0() { return cTypeRoleTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeRoleTypeIDTerminalRuleCall_0_0_1() { return cTypeRoleTypeIDTerminalRuleCall_0_0_1; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}

	public class FormalRoleParamsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalRoleParamsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalRoleParamsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFormalRoleParamParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFormalRoleParamParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormalRoleParamsBlock:
		//	{FormalRoleParamsBlock} "(" (params+=FormalRoleParam ("," params+=FormalRoleParam)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{FormalRoleParamsBlock} "(" (params+=FormalRoleParam ("," params+=FormalRoleParam)*)? ")"
		public Group getGroup() { return cGroup; }

		//{FormalRoleParamsBlock}
		public Action getFormalRoleParamsBlockAction_0() { return cFormalRoleParamsBlockAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=FormalRoleParam ("," params+=FormalRoleParam)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=FormalRoleParam
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//FormalRoleParam
		public RuleCall getParamsFormalRoleParamParserRuleCall_2_0_0() { return cParamsFormalRoleParamParserRuleCall_2_0_0; }

		//("," params+=FormalRoleParam)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=FormalRoleParam
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//FormalRoleParam
		public RuleCall getParamsFormalRoleParamParserRuleCall_2_1_1_0() { return cParamsFormalRoleParamParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RoleInstanceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleInstanceReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractRoleInstanceReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSelfReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSelfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		/////////// ROLE INSTANCE REFERENCES ///////////////
		// RoleInstanceReference:
		//	AbstractRoleInstanceReference | {SelfReference} "self";
		@Override public ParserRule getRule() { return rule; }

		//AbstractRoleInstanceReference | {SelfReference} "self"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractRoleInstanceReference
		public RuleCall getAbstractRoleInstanceReferenceParserRuleCall_0() { return cAbstractRoleInstanceReferenceParserRuleCall_0; }

		//{SelfReference} "self"
		public Group getGroup_1() { return cGroup_1; }

		//{SelfReference}
		public Action getSelfReferenceAction_1_0() { return cSelfReferenceAction_1_0; }

		//"self"
		public Keyword getSelfKeyword_1_1() { return cSelfKeyword_1_1; }
	}

	public class AbstractRoleInstanceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRoleInstanceReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefAbstractRoleInstanceCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefAbstractRoleInstanceIDTerminalRuleCall_0_1 = (RuleCall)cRefAbstractRoleInstanceCrossReference_0.eContents().get(1);
		
		//AbstractRoleInstanceReference:
		//	ref=[AbstractRoleInstance];
		@Override public ParserRule getRule() { return rule; }

		//ref=[AbstractRoleInstance]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[AbstractRoleInstance]
		public CrossReference getRefAbstractRoleInstanceCrossReference_0() { return cRefAbstractRoleInstanceCrossReference_0; }

		//ID
		public RuleCall getRefAbstractRoleInstanceIDTerminalRuleCall_0_1() { return cRefAbstractRoleInstanceIDTerminalRuleCall_0_1; }
	}

	public class ActualRoleParamsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualRoleParamsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActualRoleParamsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsRoleInstanceReferenceParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsRoleInstanceReferenceParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActualRoleParamsBlock:
		//	{ActualRoleParamsBlock} "(" (params+=RoleInstanceReference ("," params+=RoleInstanceReference)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{ActualRoleParamsBlock} "(" (params+=RoleInstanceReference ("," params+=RoleInstanceReference)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ActualRoleParamsBlock}
		public Action getActualRoleParamsBlockAction_0() { return cActualRoleParamsBlockAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=RoleInstanceReference ("," params+=RoleInstanceReference)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=RoleInstanceReference
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//RoleInstanceReference
		public RuleCall getParamsRoleInstanceReferenceParserRuleCall_2_0_0() { return cParamsRoleInstanceReferenceParserRuleCall_2_0_0; }

		//("," params+=RoleInstanceReference)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=RoleInstanceReference
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//RoleInstanceReference
		public RuleCall getParamsRoleInstanceReferenceParserRuleCall_2_1_1_0() { return cParamsRoleInstanceReferenceParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AbstractDataVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDataVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFormalDataParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////// DATA INSTANCES /////////////////
		// AbstractDataVariable:
		//	FormalDataParam | DataVariable;
		@Override public ParserRule getRule() { return rule; }

		//FormalDataParam | DataVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//FormalDataParam
		public RuleCall getFormalDataParamParserRuleCall_0() { return cFormalDataParamParserRuleCall_0; }

		//DataVariable
		public RuleCall getDataVariableParserRuleCall_1() { return cDataVariableParserRuleCall_1; }
	}

	public class DataVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DataVariable:
		//	name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class FormalDataParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalDataParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FormalDataParam:
		//	type=JvmTypeReference name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//type=JvmTypeReference name=ValidID
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}

	public class FormalDataParamsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalDataParamsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalDataParamsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFormalDataParamParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFormalDataParamParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormalDataParamsBlock:
		//	{FormalDataParamsBlock} "(" (params+=FormalDataParam ("," params+=FormalDataParam)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{FormalDataParamsBlock} "(" (params+=FormalDataParam ("," params+=FormalDataParam)*)? ")"
		public Group getGroup() { return cGroup; }

		//{FormalDataParamsBlock}
		public Action getFormalDataParamsBlockAction_0() { return cFormalDataParamsBlockAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=FormalDataParam ("," params+=FormalDataParam)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=FormalDataParam
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//FormalDataParam
		public RuleCall getParamsFormalDataParamParserRuleCall_2_0_0() { return cParamsFormalDataParamParserRuleCall_2_0_0; }

		//("," params+=FormalDataParam)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=FormalDataParam
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//FormalDataParam
		public RuleCall getParamsFormalDataParamParserRuleCall_2_1_1_0() { return cParamsFormalDataParamParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleDataExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubtractionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///////////// DATA INSTANCE REFERENCES /////////////////
		// DataExpression:
		//	SimpleDataExpression | Addition | Subtraction;
		@Override public ParserRule getRule() { return rule; }

		//SimpleDataExpression | Addition | Subtraction
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleDataExpression
		public RuleCall getSimpleDataExpressionParserRuleCall_0() { return cSimpleDataExpressionParserRuleCall_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }

		//Subtraction
		public RuleCall getSubtractionParserRuleCall_2() { return cSubtractionParserRuleCall_2; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleDataExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorPlusSignKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleDataExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns DataExpression:
		//	SimpleDataExpression ({Addition.left=current} operator="+" right=SimpleDataExpression);
		@Override public ParserRule getRule() { return rule; }

		//SimpleDataExpression ({Addition.left=current} operator="+" right=SimpleDataExpression)
		public Group getGroup() { return cGroup; }

		//SimpleDataExpression
		public RuleCall getSimpleDataExpressionParserRuleCall_0() { return cSimpleDataExpressionParserRuleCall_0; }

		//{Addition.left=current} operator="+" right=SimpleDataExpression
		public Group getGroup_1() { return cGroup_1; }

		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }

		//operator="+"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0() { return cOperatorPlusSignKeyword_1_1_0; }

		//right=SimpleDataExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SimpleDataExpression
		public RuleCall getRightSimpleDataExpressionParserRuleCall_1_2_0() { return cRightSimpleDataExpressionParserRuleCall_1_2_0; }
	}

	public class SubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleDataExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubtractionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleDataExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Subtraction returns DataExpression:
		//	SimpleDataExpression ({Subtraction.left=current} operator="-" right=SimpleDataExpression);
		@Override public ParserRule getRule() { return rule; }

		//SimpleDataExpression ({Subtraction.left=current} operator="-" right=SimpleDataExpression)
		public Group getGroup() { return cGroup; }

		//SimpleDataExpression
		public RuleCall getSimpleDataExpressionParserRuleCall_0() { return cSimpleDataExpressionParserRuleCall_0; }

		//{Subtraction.left=current} operator="-" right=SimpleDataExpression
		public Group getGroup_1() { return cGroup_1; }

		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_0() { return cSubtractionLeftAction_1_0; }

		//operator="-"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0() { return cOperatorHyphenMinusKeyword_1_1_0; }

		//right=SimpleDataExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SimpleDataExpression
		public RuleCall getRightSimpleDataExpressionParserRuleCall_1_2_0() { return cRightSimpleDataExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleDataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDataExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractDataReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractDataValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleDataExpression returns DataExpression:
		//	AbstractDataReference | AbstractDataValue;
		@Override public ParserRule getRule() { return rule; }

		//AbstractDataReference | AbstractDataValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractDataReference
		public RuleCall getAbstractDataReferenceParserRuleCall_0() { return cAbstractDataReferenceParserRuleCall_0; }

		//AbstractDataValue
		public RuleCall getAbstractDataValueParserRuleCall_1() { return cAbstractDataValueParserRuleCall_1; }
	}

	public class AbstractDataReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDataReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractDataVariableReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoleAttributeTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentAttributeTypeReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractDataReference:
		//	AbstractDataVariableReference | RoleAttributeTypeReference | ComponentAttributeTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//AbstractDataVariableReference | RoleAttributeTypeReference | ComponentAttributeTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractDataVariableReference
		public RuleCall getAbstractDataVariableReferenceParserRuleCall_0() { return cAbstractDataVariableReferenceParserRuleCall_0; }

		//RoleAttributeTypeReference
		public RuleCall getRoleAttributeTypeReferenceParserRuleCall_1() { return cRoleAttributeTypeReferenceParserRuleCall_1; }

		//ComponentAttributeTypeReference
		public RuleCall getComponentAttributeTypeReferenceParserRuleCall_2() { return cComponentAttributeTypeReferenceParserRuleCall_2; }
	}

	public class AbstractDataVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDataVariableReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefAbstractDataVariableCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefAbstractDataVariableIDTerminalRuleCall_0_1 = (RuleCall)cRefAbstractDataVariableCrossReference_0.eContents().get(1);
		
		//AbstractDataVariableReference:
		//	ref=[AbstractDataVariable];
		@Override public ParserRule getRule() { return rule; }

		//ref=[AbstractDataVariable]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[AbstractDataVariable]
		public CrossReference getRefAbstractDataVariableCrossReference_0() { return cRefAbstractDataVariableCrossReference_0; }

		//ID
		public RuleCall getRefAbstractDataVariableIDTerminalRuleCall_0_1() { return cRefAbstractDataVariableIDTerminalRuleCall_0_1; }
	}

	public class RoleAttributeTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleAttributeTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefRoleAttributeTypeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefRoleAttributeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cRefRoleAttributeTypeCrossReference_1_0.eContents().get(1);
		
		//RoleAttributeTypeReference:
		//	"self." ref=[RoleAttributeType];
		@Override public ParserRule getRule() { return rule; }

		//"self." ref=[RoleAttributeType]
		public Group getGroup() { return cGroup; }

		//"self."
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }

		//ref=[RoleAttributeType]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[RoleAttributeType]
		public CrossReference getRefRoleAttributeTypeCrossReference_1_0() { return cRefRoleAttributeTypeCrossReference_1_0; }

		//ID
		public RuleCall getRefRoleAttributeTypeIDTerminalRuleCall_1_0_1() { return cRefRoleAttributeTypeIDTerminalRuleCall_1_0_1; }
	}

	public class ComponentAttributeTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentAttributeTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOwnerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefComponentAttributeTypeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefComponentAttributeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cRefComponentAttributeTypeCrossReference_1_0.eContents().get(1);
		
		//ComponentAttributeTypeReference:
		//	"owner." ref=[ComponentAttributeType];
		@Override public ParserRule getRule() { return rule; }

		//"owner." ref=[ComponentAttributeType]
		public Group getGroup() { return cGroup; }

		//"owner."
		public Keyword getOwnerKeyword_0() { return cOwnerKeyword_0; }

		//ref=[ComponentAttributeType]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ComponentAttributeType]
		public CrossReference getRefComponentAttributeTypeCrossReference_1_0() { return cRefComponentAttributeTypeCrossReference_1_0; }

		//ID
		public RuleCall getRefComponentAttributeTypeIDTerminalRuleCall_1_0_1() { return cRefComponentAttributeTypeIDTerminalRuleCall_1_0_1; }
	}

	public class ActualDataParamsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualDataParamsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActualDataParamsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsDataExpressionParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsDataExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActualDataParamsBlock:
		//	{ActualDataParamsBlock} "(" (params+=DataExpression ("," params+=DataExpression)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//{ActualDataParamsBlock} "(" (params+=DataExpression ("," params+=DataExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ActualDataParamsBlock}
		public Action getActualDataParamsBlockAction_0() { return cActualDataParamsBlockAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=DataExpression ("," params+=DataExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=DataExpression
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//DataExpression
		public RuleCall getParamsDataExpressionParserRuleCall_2_0_0() { return cParamsDataExpressionParserRuleCall_2_0_0; }

		//("," params+=DataExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=DataExpression
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//DataExpression
		public RuleCall getParamsDataExpressionParserRuleCall_2_1_1_0() { return cParamsDataExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AbstractDuplicateFreeObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDuplicateFreeObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractHelenaEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractFieldTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMessageTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperationTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRoleBehaviorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProcessParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLabelParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAbstractRoleInstanceParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAbstractDataVariableParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		/////////////// AUXILIARIES //////////////////
		// // Parent for Helena objects that should be duplicate free
		//
		//AbstractDuplicateFreeObject:
		//	AbstractHelenaEntity | AbstractFieldType | MessageType | OperationType | RoleBehavior | Process | Label |
		//	AbstractRoleInstance | AbstractDataVariable;
		@Override public ParserRule getRule() { return rule; }

		//AbstractHelenaEntity | AbstractFieldType | MessageType | OperationType | RoleBehavior | Process | Label |
		//AbstractRoleInstance | AbstractDataVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractHelenaEntity
		public RuleCall getAbstractHelenaEntityParserRuleCall_0() { return cAbstractHelenaEntityParserRuleCall_0; }

		//AbstractFieldType
		public RuleCall getAbstractFieldTypeParserRuleCall_1() { return cAbstractFieldTypeParserRuleCall_1; }

		//MessageType
		public RuleCall getMessageTypeParserRuleCall_2() { return cMessageTypeParserRuleCall_2; }

		//OperationType
		public RuleCall getOperationTypeParserRuleCall_3() { return cOperationTypeParserRuleCall_3; }

		//RoleBehavior
		public RuleCall getRoleBehaviorParserRuleCall_4() { return cRoleBehaviorParserRuleCall_4; }

		//Process
		public RuleCall getProcessParserRuleCall_5() { return cProcessParserRuleCall_5; }

		//Label
		public RuleCall getLabelParserRuleCall_6() { return cLabelParserRuleCall_6; }

		//AbstractRoleInstance
		public RuleCall getAbstractRoleInstanceParserRuleCall_7() { return cAbstractRoleInstanceParserRuleCall_7; }

		//AbstractDataVariable
		public RuleCall getAbstractDataVariableParserRuleCall_8() { return cAbstractDataVariableParserRuleCall_8; }
	}

	public class AbstractHelenaEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractHelenaEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnsembleStructureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Parent for all structural entities of Helena
		// AbstractHelenaEntity:
		//	ComponentType | RoleType | EnsembleStructure;
		@Override public ParserRule getRule() { return rule; }

		//ComponentType | RoleType | EnsembleStructure
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentType
		public RuleCall getComponentTypeParserRuleCall_0() { return cComponentTypeParserRuleCall_0; }

		//RoleType
		public RuleCall getRoleTypeParserRuleCall_1() { return cRoleTypeParserRuleCall_1; }

		//EnsembleStructure
		public RuleCall getEnsembleStructureParserRuleCall_2() { return cEnsembleStructureParserRuleCall_2; }
	}

	public class AbstractFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractFieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractComponentFieldTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoleAttributeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Parent for all fields (component or role attributes and component associations)
		// AbstractFieldType:
		//	AbstractComponentFieldType | RoleAttributeType;
		@Override public ParserRule getRule() { return rule; }

		//AbstractComponentFieldType | RoleAttributeType
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractComponentFieldType
		public RuleCall getAbstractComponentFieldTypeParserRuleCall_0() { return cAbstractComponentFieldTypeParserRuleCall_0; }

		//RoleAttributeType
		public RuleCall getRoleAttributeTypeParserRuleCall_1() { return cRoleAttributeTypeParserRuleCall_1; }
	}

	public class AbstractRoleBehaviorEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRoleBehaviorEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComponentInstanceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRoleInstanceReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAbstractRoleInstanceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAbstractDataVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDataExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// Parent for entities used in a role behavior
		// AbstractRoleBehaviorEntity:
		//	Process | ProcessExpression | Action | ComponentInstance | RoleInstanceReference | AbstractRoleInstance |
		//	AbstractDataVariable | DataExpression;
		@Override public ParserRule getRule() { return rule; }

		//Process | ProcessExpression | Action | ComponentInstance | RoleInstanceReference | AbstractRoleInstance |
		//AbstractDataVariable | DataExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Process
		public RuleCall getProcessParserRuleCall_0() { return cProcessParserRuleCall_0; }

		//ProcessExpression
		public RuleCall getProcessExpressionParserRuleCall_1() { return cProcessExpressionParserRuleCall_1; }

		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }

		//ComponentInstance
		public RuleCall getComponentInstanceParserRuleCall_3() { return cComponentInstanceParserRuleCall_3; }

		//RoleInstanceReference
		public RuleCall getRoleInstanceReferenceParserRuleCall_4() { return cRoleInstanceReferenceParserRuleCall_4; }

		//AbstractRoleInstance
		public RuleCall getAbstractRoleInstanceParserRuleCall_5() { return cAbstractRoleInstanceParserRuleCall_5; }

		//AbstractDataVariable
		public RuleCall getAbstractDataVariableParserRuleCall_6() { return cAbstractDataVariableParserRuleCall_6; }

		//DataExpression
		public RuleCall getDataExpressionParserRuleCall_7() { return cDataExpressionParserRuleCall_7; }
	}

	public class AbstractInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractInstance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractDataVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractRoleInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Parent for all instances
		// AbstractInstance:
		//	AbstractDataVariable | AbstractRoleInstance;
		@Override public ParserRule getRule() { return rule; }

		//AbstractDataVariable | AbstractRoleInstance
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractDataVariable
		public RuleCall getAbstractDataVariableParserRuleCall_0() { return cAbstractDataVariableParserRuleCall_0; }

		//AbstractRoleInstance
		public RuleCall getAbstractRoleInstanceParserRuleCall_1() { return cAbstractRoleInstanceParserRuleCall_1; }
	}
	
	
	public class MsgDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MsgDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINOUTInOutKeyword_2_0 = (Keyword)cINOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MsgDirection:
		//	IN="in" | OUT="out" | INOUT="in/out";
		public EnumRule getRule() { return rule; }

		//IN="in" | OUT="out" | INOUT="in/out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }

		//INOUT="in/out"
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_2() { return cINOUTEnumLiteralDeclaration_2; }

		//"in/out"
		public Keyword getINOUTInOutKeyword_2_0() { return cINOUTInOutKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ComponentTypeElements pComponentType;
	private final AbstractComponentFieldTypeElements pAbstractComponentFieldType;
	private final ComponentAttributeTypeElements pComponentAttributeType;
	private final ComponentAssociationTypeElements pComponentAssociationType;
	private final OperationTypeElements pOperationType;
	private final RoleTypeElements pRoleType;
	private final RoleAttributeTypeElements pRoleAttributeType;
	private final MessageTypeElements pMessageType;
	private final MsgDirectionElements unknownRuleMsgDirection;
	private final EnsembleStructureElements pEnsembleStructure;
	private final RoleTypeWithMultiplicityElements pRoleTypeWithMultiplicity;
	private final MultElemElements pMultElem;
	private final RoleBehaviorElements pRoleBehavior;
	private final ProcessElements pProcess;
	private final ProcessExpressionElements pProcessExpression;
	private final ActionPrefixElements pActionPrefix;
	private final NondeterministicChoiceElements pNondeterministicChoice;
	private final IfThenElseElements pIfThenElse;
	private final ProcessInvocationElements pProcessInvocation;
	private final ActionElements pAction;
	private final AbstractAssignmentElements pAbstractAssignment;
	private final AbstractMessageCallElements pAbstractMessageCall;
	private final OutgoingMessageCallElements pOutgoingMessageCall;
	private final IncomingMessageCallElements pIncomingMessageCall;
	private final OperationCallElements pOperationCall;
	private final ComponentAttributeSetterElements pComponentAttributeSetter;
	private final RoleAttributeSetterElements pRoleAttributeSetter;
	private final LabelElements pLabel;
	private final GuardElements pGuard;
	private final OrTermElements pOrTerm;
	private final AndTermElements pAndTerm;
	private final EqualityTermElements pEqualityTerm;
	private final NotTermElements pNotTerm;
	private final AtomElements pAtom;
	private final PlaysQueryElements pPlaysQuery;
	private final RelationElements pRelation;
	private final GuardInParenthesesElements pGuardInParentheses;
	private final AbstractDataValueElements pAbstractDataValue;
	private final BooleanValueElements pBooleanValue;
	private final NumberValueElements pNumberValue;
	private final StringValueElements pStringValue;
	private final OpEqualityElements pOpEquality;
	private final OpCompareElements pOpCompare;
	private final ComponentInstanceElements pComponentInstance;
	private final ComponentAssociationTypeReferenceElements pComponentAssociationTypeReference;
	private final OwnerReferenceElements pOwnerReference;
	private final AbstractRoleInstanceElements pAbstractRoleInstance;
	private final RoleInstanceVariableElements pRoleInstanceVariable;
	private final FormalRoleParamElements pFormalRoleParam;
	private final FormalRoleParamsBlockElements pFormalRoleParamsBlock;
	private final RoleInstanceReferenceElements pRoleInstanceReference;
	private final AbstractRoleInstanceReferenceElements pAbstractRoleInstanceReference;
	private final ActualRoleParamsBlockElements pActualRoleParamsBlock;
	private final AbstractDataVariableElements pAbstractDataVariable;
	private final DataVariableElements pDataVariable;
	private final FormalDataParamElements pFormalDataParam;
	private final FormalDataParamsBlockElements pFormalDataParamsBlock;
	private final DataExpressionElements pDataExpression;
	private final AdditionElements pAddition;
	private final SubtractionElements pSubtraction;
	private final SimpleDataExpressionElements pSimpleDataExpression;
	private final AbstractDataReferenceElements pAbstractDataReference;
	private final AbstractDataVariableReferenceElements pAbstractDataVariableReference;
	private final RoleAttributeTypeReferenceElements pRoleAttributeTypeReference;
	private final ComponentAttributeTypeReferenceElements pComponentAttributeTypeReference;
	private final ActualDataParamsBlockElements pActualDataParamsBlock;
	private final AbstractDuplicateFreeObjectElements pAbstractDuplicateFreeObject;
	private final AbstractHelenaEntityElements pAbstractHelenaEntity;
	private final AbstractFieldTypeElements pAbstractFieldType;
	private final AbstractRoleBehaviorEntityElements pAbstractRoleBehaviorEntity;
	private final AbstractInstanceElements pAbstractInstance;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public HelenaTextGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModel = new ModelElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pComponentType = new ComponentTypeElements();
		this.pAbstractComponentFieldType = new AbstractComponentFieldTypeElements();
		this.pComponentAttributeType = new ComponentAttributeTypeElements();
		this.pComponentAssociationType = new ComponentAssociationTypeElements();
		this.pOperationType = new OperationTypeElements();
		this.pRoleType = new RoleTypeElements();
		this.pRoleAttributeType = new RoleAttributeTypeElements();
		this.pMessageType = new MessageTypeElements();
		this.unknownRuleMsgDirection = new MsgDirectionElements();
		this.pEnsembleStructure = new EnsembleStructureElements();
		this.pRoleTypeWithMultiplicity = new RoleTypeWithMultiplicityElements();
		this.pMultElem = new MultElemElements();
		this.pRoleBehavior = new RoleBehaviorElements();
		this.pProcess = new ProcessElements();
		this.pProcessExpression = new ProcessExpressionElements();
		this.pActionPrefix = new ActionPrefixElements();
		this.pNondeterministicChoice = new NondeterministicChoiceElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pProcessInvocation = new ProcessInvocationElements();
		this.pAction = new ActionElements();
		this.pAbstractAssignment = new AbstractAssignmentElements();
		this.pAbstractMessageCall = new AbstractMessageCallElements();
		this.pOutgoingMessageCall = new OutgoingMessageCallElements();
		this.pIncomingMessageCall = new IncomingMessageCallElements();
		this.pOperationCall = new OperationCallElements();
		this.pComponentAttributeSetter = new ComponentAttributeSetterElements();
		this.pRoleAttributeSetter = new RoleAttributeSetterElements();
		this.pLabel = new LabelElements();
		this.pGuard = new GuardElements();
		this.pOrTerm = new OrTermElements();
		this.pAndTerm = new AndTermElements();
		this.pEqualityTerm = new EqualityTermElements();
		this.pNotTerm = new NotTermElements();
		this.pAtom = new AtomElements();
		this.pPlaysQuery = new PlaysQueryElements();
		this.pRelation = new RelationElements();
		this.pGuardInParentheses = new GuardInParenthesesElements();
		this.pAbstractDataValue = new AbstractDataValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pStringValue = new StringValueElements();
		this.pOpEquality = new OpEqualityElements();
		this.pOpCompare = new OpCompareElements();
		this.pComponentInstance = new ComponentInstanceElements();
		this.pComponentAssociationTypeReference = new ComponentAssociationTypeReferenceElements();
		this.pOwnerReference = new OwnerReferenceElements();
		this.pAbstractRoleInstance = new AbstractRoleInstanceElements();
		this.pRoleInstanceVariable = new RoleInstanceVariableElements();
		this.pFormalRoleParam = new FormalRoleParamElements();
		this.pFormalRoleParamsBlock = new FormalRoleParamsBlockElements();
		this.pRoleInstanceReference = new RoleInstanceReferenceElements();
		this.pAbstractRoleInstanceReference = new AbstractRoleInstanceReferenceElements();
		this.pActualRoleParamsBlock = new ActualRoleParamsBlockElements();
		this.pAbstractDataVariable = new AbstractDataVariableElements();
		this.pDataVariable = new DataVariableElements();
		this.pFormalDataParam = new FormalDataParamElements();
		this.pFormalDataParamsBlock = new FormalDataParamsBlockElements();
		this.pDataExpression = new DataExpressionElements();
		this.pAddition = new AdditionElements();
		this.pSubtraction = new SubtractionElements();
		this.pSimpleDataExpression = new SimpleDataExpressionElements();
		this.pAbstractDataReference = new AbstractDataReferenceElements();
		this.pAbstractDataVariableReference = new AbstractDataVariableReferenceElements();
		this.pRoleAttributeTypeReference = new RoleAttributeTypeReferenceElements();
		this.pComponentAttributeTypeReference = new ComponentAttributeTypeReferenceElements();
		this.pActualDataParamsBlock = new ActualDataParamsBlockElements();
		this.pAbstractDuplicateFreeObject = new AbstractDuplicateFreeObjectElements();
		this.pAbstractHelenaEntity = new AbstractHelenaEntityElements();
		this.pAbstractFieldType = new AbstractFieldTypeElements();
		this.pAbstractRoleBehaviorEntity = new AbstractRoleBehaviorEntityElements();
		this.pAbstractInstance = new AbstractInstanceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.ascens.HelenaText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//////////// MODEL /////////////
	// Model:
	//	headPkg=PackageDeclaration;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" compTypes+=ComponentType* & roleTypes+=RoleType* & ensStructs+=EnsembleStructure* &
	//	roleBehaviors+=RoleBehavior* "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//////////// COMPONENT TYPE /////////////
	// ComponentType:
	//	"componentType" name=ValidID "{" (attrs+=ComponentAttributeType | assocs+=ComponentAssociationType |
	//	ops+=OperationType)* "}";
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}

	//AbstractComponentFieldType:
	//	ComponentAttributeType | ComponentAssociationType;
	public AbstractComponentFieldTypeElements getAbstractComponentFieldTypeAccess() {
		return pAbstractComponentFieldType;
	}
	
	public ParserRule getAbstractComponentFieldTypeRule() {
		return getAbstractComponentFieldTypeAccess().getRule();
	}

	//ComponentAttributeType:
	//	"attr" type=JvmTypeReference name=ValidID ";";
	public ComponentAttributeTypeElements getComponentAttributeTypeAccess() {
		return pComponentAttributeType;
	}
	
	public ParserRule getComponentAttributeTypeRule() {
		return getComponentAttributeTypeAccess().getRule();
	}

	//ComponentAssociationType:
	//	"assoc" type=[ComponentType] name=ValidID ";";
	public ComponentAssociationTypeElements getComponentAssociationTypeAccess() {
		return pComponentAssociationType;
	}
	
	public ParserRule getComponentAssociationTypeRule() {
		return getComponentAssociationTypeAccess().getRule();
	}

	//OperationType:
	//	"op" returnType=JvmTypeReference name=ValidID formalDataParamsBlock=FormalDataParamsBlock ";";
	public OperationTypeElements getOperationTypeAccess() {
		return pOperationType;
	}
	
	public ParserRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}

	/////////////// ROLE TYPE /////////////////
	// RoleType:
	//	"roleType" name=ValidID "over" compTypes+=[ComponentType] ("," compTypes+=[ComponentType])* "{"
	//	(roleattrs+=RoleAttributeType | rolemsgs+=MessageType)* "}";
	public RoleTypeElements getRoleTypeAccess() {
		return pRoleType;
	}
	
	public ParserRule getRoleTypeRule() {
		return getRoleTypeAccess().getRule();
	}

	//RoleAttributeType:
	//	"roleattr" type=JvmTypeReference name=ValidID ";";
	public RoleAttributeTypeElements getRoleAttributeTypeAccess() {
		return pRoleAttributeType;
	}
	
	public ParserRule getRoleAttributeTypeRule() {
		return getRoleAttributeTypeAccess().getRule();
	}

	//MessageType:
	//	"rolemsg" direction=MsgDirection name=ValidID formalRoleParamsBlock=FormalRoleParamsBlock
	//	formalDataParamsBlock=FormalDataParamsBlock ";";
	public MessageTypeElements getMessageTypeAccess() {
		return pMessageType;
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}

	//enum MsgDirection:
	//	IN="in" | OUT="out" | INOUT="in/out";
	public MsgDirectionElements getMsgDirectionAccess() {
		return unknownRuleMsgDirection;
	}
	
	public EnumRule getMsgDirectionRule() {
		return getMsgDirectionAccess().getRule();
	}

	/////////////// ENSEMBLE STRUCTURE /////////////
	// EnsembleStructure:
	//	"ensembleStructure" name=ValidID "{" rtWithMult+=RoleTypeWithMultiplicity rtWithMult+=RoleTypeWithMultiplicity* "}";
	public EnsembleStructureElements getEnsembleStructureAccess() {
		return pEnsembleStructure;
	}
	
	public ParserRule getEnsembleStructureRule() {
		return getEnsembleStructureAccess().getRule();
	}

	//RoleTypeWithMultiplicity:
	//	"<" roleType=[RoleType] "," "min" "=" min=MultElem "," "max" "=" max=MultElem "," "cap" "=" capacity=INT ">" ";";
	public RoleTypeWithMultiplicityElements getRoleTypeWithMultiplicityAccess() {
		return pRoleTypeWithMultiplicity;
	}
	
	public ParserRule getRoleTypeWithMultiplicityRule() {
		return getRoleTypeWithMultiplicityAccess().getRule();
	}

	//MultElem:
	//	"*" | INT;
	public MultElemElements getMultElemAccess() {
		return pMultElem;
	}
	
	public ParserRule getMultElemRule() {
		return getMultElemAccess().getRule();
	}

	//////////// ROLE BEHAVIORS /////////
	// RoleBehavior:
	//	{DeclaringRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processExpr=ProcessExpression |
	//	{InvokingRoleBehavior} "roleBehavior" roleTypeRef=[RoleType] "=" processInvocation=ProcessInvocation "{"
	//	processes+=Process* "}";
	public RoleBehaviorElements getRoleBehaviorAccess() {
		return pRoleBehavior;
	}
	
	public ParserRule getRoleBehaviorRule() {
		return getRoleBehaviorAccess().getRule();
	}

	//Process:
	//	"process" name=ValidID "=" processExpr=ProcessExpression;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//////////// PROCESS TERMS /////////
	// ProcessExpression:
	//	{QuitTerm} "quit" | ActionPrefix | NondeterministicChoice | IfThenElse | ProcessInvocation;
	public ProcessExpressionElements getProcessExpressionAccess() {
		return pProcessExpression;
	}
	
	public ParserRule getProcessExpressionRule() {
		return getProcessExpressionAccess().getRule();
	}

	//ActionPrefix:
	//	action=Action "." processExpr=ProcessExpression;
	public ActionPrefixElements getActionPrefixAccess() {
		return pActionPrefix;
	}
	
	public ParserRule getActionPrefixRule() {
		return getActionPrefixAccess().getRule();
	}

	//NondeterministicChoice:
	//	"(" first=ProcessExpression "+" second=ProcessExpression ")";
	public NondeterministicChoiceElements getNondeterministicChoiceAccess() {
		return pNondeterministicChoice;
	}
	
	public ParserRule getNondeterministicChoiceRule() {
		return getNondeterministicChoiceAccess().getRule();
	}

	//IfThenElse:
	//	"if" "(" guard=Guard ")" "{" ifProcessExpr=ProcessExpression "}" "else" "{" elseProcessExpr=ProcessExpression "}";
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	//ProcessInvocation:
	//	process=[Process];
	public ProcessInvocationElements getProcessInvocationAccess() {
		return pProcessInvocation;
	}
	
	public ParserRule getProcessInvocationRule() {
		return getProcessInvocationAccess().getRule();
	}

	/////////// ACTIONS //////////////
	// Action:
	//	AbstractAssignment | AbstractMessageCall | OperationCall | ComponentAttributeSetter | RoleAttributeSetter | Label;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//AbstractAssignment:
	//	{GetAssignment} roleInst=RoleInstanceVariable "<-" "get" "(" roleTypeRef=[RoleType] ","
	//	compInstance=ComponentInstance ")" | {CreateAssignment} roleInst=RoleInstanceVariable "<-" "create" "("
	//	roleTypeRef=[RoleType] "," compInstance=ComponentInstance ")";
	public AbstractAssignmentElements getAbstractAssignmentAccess() {
		return pAbstractAssignment;
	}
	
	public ParserRule getAbstractAssignmentRule() {
		return getAbstractAssignmentAccess().getRule();
	}

	//AbstractMessageCall:
	//	OutgoingMessageCall | IncomingMessageCall;
	public AbstractMessageCallElements getAbstractMessageCallAccess() {
		return pAbstractMessageCall;
	}
	
	public ParserRule getAbstractMessageCallRule() {
		return getAbstractMessageCallAccess().getRule();
	}

	//OutgoingMessageCall:
	//	receiver=AbstractRoleInstanceReference "!" msgName=ValidID actualRoleParamsBlock=ActualRoleParamsBlock
	//	actualDataParamsBlock=ActualDataParamsBlock;
	public OutgoingMessageCallElements getOutgoingMessageCallAccess() {
		return pOutgoingMessageCall;
	}
	
	public ParserRule getOutgoingMessageCallRule() {
		return getOutgoingMessageCallAccess().getRule();
	}

	//IncomingMessageCall:
	//	"?" msgName=ValidID formalRoleParamsBlock=FormalRoleParamsBlock formalDataParamsBlock=FormalDataParamsBlock;
	public IncomingMessageCallElements getIncomingMessageCallAccess() {
		return pIncomingMessageCall;
	}
	
	public ParserRule getIncomingMessageCallRule() {
		return getIncomingMessageCallAccess().getRule();
	}

	//OperationCall:
	//	(variable=DataVariable "=")? "owner." opName=ValidID actualDataParamsBlock=ActualDataParamsBlock;
	public OperationCallElements getOperationCallAccess() {
		return pOperationCall;
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//ComponentAttributeSetter:
	//	attr=ComponentAttributeTypeReference "=" value=DataExpression;
	public ComponentAttributeSetterElements getComponentAttributeSetterAccess() {
		return pComponentAttributeSetter;
	}
	
	public ParserRule getComponentAttributeSetterRule() {
		return getComponentAttributeSetterAccess().getRule();
	}

	//RoleAttributeSetter:
	//	attr=RoleAttributeTypeReference "=" value=DataExpression;
	public RoleAttributeSetterElements getRoleAttributeSetterAccess() {
		return pRoleAttributeSetter;
	}
	
	public ParserRule getRoleAttributeSetterRule() {
		return getRoleAttributeSetterAccess().getRule();
	}

	//Label:
	//	name=ValidID;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	////////////// GUARDS //////////////
	// Guard:
	//	OrTerm;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//OrTerm returns Guard:
	//	AndTerm ({OrTerm.left=current} "||" right=AndTerm)*;
	public OrTermElements getOrTermAccess() {
		return pOrTerm;
	}
	
	public ParserRule getOrTermRule() {
		return getOrTermAccess().getRule();
	}

	//AndTerm returns Guard:
	//	EqualityTerm ({AndTerm.left=current} "&&" right=EqualityTerm)*;
	public AndTermElements getAndTermAccess() {
		return pAndTerm;
	}
	
	public ParserRule getAndTermRule() {
		return getAndTermAccess().getRule();
	}

	//EqualityTerm returns Guard:
	//	NotTerm ({EqualityTerm.left=current} operator=OpEquality right=NotTerm)*;
	public EqualityTermElements getEqualityTermAccess() {
		return pEqualityTerm;
	}
	
	public ParserRule getEqualityTermRule() {
		return getEqualityTermAccess().getRule();
	}

	//NotTerm returns Guard:
	//	{NotTerm} not="!"? atom=Atom;
	public NotTermElements getNotTermAccess() {
		return pNotTerm;
	}
	
	public ParserRule getNotTermRule() {
		return getNotTermAccess().getRule();
	}

	//Atom:
	//	DataExpression | PlaysQuery | Relation | GuardInParentheses;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//PlaysQuery:
	//	"plays" "(" roleTypeRef=[RoleType] "," compInstance=ComponentInstance ")";
	public PlaysQueryElements getPlaysQueryAccess() {
		return pPlaysQuery;
	}
	
	public ParserRule getPlaysQueryRule() {
		return getPlaysQueryAccess().getRule();
	}

	//Relation:
	//	left=DataExpression operator=OpCompare right=DataExpression;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//GuardInParentheses:
	//	"(" guard=Guard ")";
	public GuardInParenthesesElements getGuardInParenthesesAccess() {
		return pGuardInParentheses;
	}
	
	public ParserRule getGuardInParenthesesRule() {
		return getGuardInParenthesesAccess().getRule();
	}

	//AbstractDataValue:
	//	BooleanValue | NumberValue | StringValue;
	public AbstractDataValueElements getAbstractDataValueAccess() {
		return pAbstractDataValue;
	}
	
	public ParserRule getAbstractDataValueRule() {
		return getAbstractDataValueAccess().getRule();
	}

	//BooleanValue:
	//	value=XBooleanLiteral;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//NumberValue:
	//	value=XNumberLiteral;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//StringValue:
	//	value=XStringLiteral;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	////////// COMPONENT INSTANCES ///////////////
	// ComponentInstance:
	//	ComponentAssociationTypeReference | OwnerReference;
	public ComponentInstanceElements getComponentInstanceAccess() {
		return pComponentInstance;
	}
	
	public ParserRule getComponentInstanceRule() {
		return getComponentInstanceAccess().getRule();
	}

	//ComponentAssociationTypeReference:
	//	"owner." ref=[ComponentAssociationType];
	public ComponentAssociationTypeReferenceElements getComponentAssociationTypeReferenceAccess() {
		return pComponentAssociationTypeReference;
	}
	
	public ParserRule getComponentAssociationTypeReferenceRule() {
		return getComponentAssociationTypeReferenceAccess().getRule();
	}

	//OwnerReference:
	//	{OwnerReference} "owner";
	public OwnerReferenceElements getOwnerReferenceAccess() {
		return pOwnerReference;
	}
	
	public ParserRule getOwnerReferenceRule() {
		return getOwnerReferenceAccess().getRule();
	}

	///////////// ROLE INSTANCES /////////////////
	// AbstractRoleInstance:
	//	RoleInstanceVariable | FormalRoleParam;
	public AbstractRoleInstanceElements getAbstractRoleInstanceAccess() {
		return pAbstractRoleInstance;
	}
	
	public ParserRule getAbstractRoleInstanceRule() {
		return getAbstractRoleInstanceAccess().getRule();
	}

	//RoleInstanceVariable:
	//	name=ValidID;
	public RoleInstanceVariableElements getRoleInstanceVariableAccess() {
		return pRoleInstanceVariable;
	}
	
	public ParserRule getRoleInstanceVariableRule() {
		return getRoleInstanceVariableAccess().getRule();
	}

	//FormalRoleParam:
	//	type=[RoleType] name=ValidID;
	public FormalRoleParamElements getFormalRoleParamAccess() {
		return pFormalRoleParam;
	}
	
	public ParserRule getFormalRoleParamRule() {
		return getFormalRoleParamAccess().getRule();
	}

	//FormalRoleParamsBlock:
	//	{FormalRoleParamsBlock} "(" (params+=FormalRoleParam ("," params+=FormalRoleParam)*)? ")";
	public FormalRoleParamsBlockElements getFormalRoleParamsBlockAccess() {
		return pFormalRoleParamsBlock;
	}
	
	public ParserRule getFormalRoleParamsBlockRule() {
		return getFormalRoleParamsBlockAccess().getRule();
	}

	/////////// ROLE INSTANCE REFERENCES ///////////////
	// RoleInstanceReference:
	//	AbstractRoleInstanceReference | {SelfReference} "self";
	public RoleInstanceReferenceElements getRoleInstanceReferenceAccess() {
		return pRoleInstanceReference;
	}
	
	public ParserRule getRoleInstanceReferenceRule() {
		return getRoleInstanceReferenceAccess().getRule();
	}

	//AbstractRoleInstanceReference:
	//	ref=[AbstractRoleInstance];
	public AbstractRoleInstanceReferenceElements getAbstractRoleInstanceReferenceAccess() {
		return pAbstractRoleInstanceReference;
	}
	
	public ParserRule getAbstractRoleInstanceReferenceRule() {
		return getAbstractRoleInstanceReferenceAccess().getRule();
	}

	//ActualRoleParamsBlock:
	//	{ActualRoleParamsBlock} "(" (params+=RoleInstanceReference ("," params+=RoleInstanceReference)*)? ")";
	public ActualRoleParamsBlockElements getActualRoleParamsBlockAccess() {
		return pActualRoleParamsBlock;
	}
	
	public ParserRule getActualRoleParamsBlockRule() {
		return getActualRoleParamsBlockAccess().getRule();
	}

	///////////// DATA INSTANCES /////////////////
	// AbstractDataVariable:
	//	FormalDataParam | DataVariable;
	public AbstractDataVariableElements getAbstractDataVariableAccess() {
		return pAbstractDataVariable;
	}
	
	public ParserRule getAbstractDataVariableRule() {
		return getAbstractDataVariableAccess().getRule();
	}

	//DataVariable:
	//	name=ValidID;
	public DataVariableElements getDataVariableAccess() {
		return pDataVariable;
	}
	
	public ParserRule getDataVariableRule() {
		return getDataVariableAccess().getRule();
	}

	//FormalDataParam:
	//	type=JvmTypeReference name=ValidID;
	public FormalDataParamElements getFormalDataParamAccess() {
		return pFormalDataParam;
	}
	
	public ParserRule getFormalDataParamRule() {
		return getFormalDataParamAccess().getRule();
	}

	//FormalDataParamsBlock:
	//	{FormalDataParamsBlock} "(" (params+=FormalDataParam ("," params+=FormalDataParam)*)? ")";
	public FormalDataParamsBlockElements getFormalDataParamsBlockAccess() {
		return pFormalDataParamsBlock;
	}
	
	public ParserRule getFormalDataParamsBlockRule() {
		return getFormalDataParamsBlockAccess().getRule();
	}

	///////////// DATA INSTANCE REFERENCES /////////////////
	// DataExpression:
	//	SimpleDataExpression | Addition | Subtraction;
	public DataExpressionElements getDataExpressionAccess() {
		return pDataExpression;
	}
	
	public ParserRule getDataExpressionRule() {
		return getDataExpressionAccess().getRule();
	}

	//Addition returns DataExpression:
	//	SimpleDataExpression ({Addition.left=current} operator="+" right=SimpleDataExpression);
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Subtraction returns DataExpression:
	//	SimpleDataExpression ({Subtraction.left=current} operator="-" right=SimpleDataExpression);
	public SubtractionElements getSubtractionAccess() {
		return pSubtraction;
	}
	
	public ParserRule getSubtractionRule() {
		return getSubtractionAccess().getRule();
	}

	//SimpleDataExpression returns DataExpression:
	//	AbstractDataReference | AbstractDataValue;
	public SimpleDataExpressionElements getSimpleDataExpressionAccess() {
		return pSimpleDataExpression;
	}
	
	public ParserRule getSimpleDataExpressionRule() {
		return getSimpleDataExpressionAccess().getRule();
	}

	//AbstractDataReference:
	//	AbstractDataVariableReference | RoleAttributeTypeReference | ComponentAttributeTypeReference;
	public AbstractDataReferenceElements getAbstractDataReferenceAccess() {
		return pAbstractDataReference;
	}
	
	public ParserRule getAbstractDataReferenceRule() {
		return getAbstractDataReferenceAccess().getRule();
	}

	//AbstractDataVariableReference:
	//	ref=[AbstractDataVariable];
	public AbstractDataVariableReferenceElements getAbstractDataVariableReferenceAccess() {
		return pAbstractDataVariableReference;
	}
	
	public ParserRule getAbstractDataVariableReferenceRule() {
		return getAbstractDataVariableReferenceAccess().getRule();
	}

	//RoleAttributeTypeReference:
	//	"self." ref=[RoleAttributeType];
	public RoleAttributeTypeReferenceElements getRoleAttributeTypeReferenceAccess() {
		return pRoleAttributeTypeReference;
	}
	
	public ParserRule getRoleAttributeTypeReferenceRule() {
		return getRoleAttributeTypeReferenceAccess().getRule();
	}

	//ComponentAttributeTypeReference:
	//	"owner." ref=[ComponentAttributeType];
	public ComponentAttributeTypeReferenceElements getComponentAttributeTypeReferenceAccess() {
		return pComponentAttributeTypeReference;
	}
	
	public ParserRule getComponentAttributeTypeReferenceRule() {
		return getComponentAttributeTypeReferenceAccess().getRule();
	}

	//ActualDataParamsBlock:
	//	{ActualDataParamsBlock} "(" (params+=DataExpression ("," params+=DataExpression)*)? ")";
	public ActualDataParamsBlockElements getActualDataParamsBlockAccess() {
		return pActualDataParamsBlock;
	}
	
	public ParserRule getActualDataParamsBlockRule() {
		return getActualDataParamsBlockAccess().getRule();
	}

	/////////////// AUXILIARIES //////////////////
	// // Parent for Helena objects that should be duplicate free
	//
	//AbstractDuplicateFreeObject:
	//	AbstractHelenaEntity | AbstractFieldType | MessageType | OperationType | RoleBehavior | Process | Label |
	//	AbstractRoleInstance | AbstractDataVariable;
	public AbstractDuplicateFreeObjectElements getAbstractDuplicateFreeObjectAccess() {
		return pAbstractDuplicateFreeObject;
	}
	
	public ParserRule getAbstractDuplicateFreeObjectRule() {
		return getAbstractDuplicateFreeObjectAccess().getRule();
	}

	//// Parent for all structural entities of Helena
	// AbstractHelenaEntity:
	//	ComponentType | RoleType | EnsembleStructure;
	public AbstractHelenaEntityElements getAbstractHelenaEntityAccess() {
		return pAbstractHelenaEntity;
	}
	
	public ParserRule getAbstractHelenaEntityRule() {
		return getAbstractHelenaEntityAccess().getRule();
	}

	//// Parent for all fields (component or role attributes and component associations)
	// AbstractFieldType:
	//	AbstractComponentFieldType | RoleAttributeType;
	public AbstractFieldTypeElements getAbstractFieldTypeAccess() {
		return pAbstractFieldType;
	}
	
	public ParserRule getAbstractFieldTypeRule() {
		return getAbstractFieldTypeAccess().getRule();
	}

	//// Parent for entities used in a role behavior
	// AbstractRoleBehaviorEntity:
	//	Process | ProcessExpression | Action | ComponentInstance | RoleInstanceReference | AbstractRoleInstance |
	//	AbstractDataVariable | DataExpression;
	public AbstractRoleBehaviorEntityElements getAbstractRoleBehaviorEntityAccess() {
		return pAbstractRoleBehaviorEntity;
	}
	
	public ParserRule getAbstractRoleBehaviorEntityRule() {
		return getAbstractRoleBehaviorEntityAccess().getRule();
	}

	//// Parent for all instances
	// AbstractInstance:
	//	AbstractDataVariable | AbstractRoleInstance;
	public AbstractInstanceElements getAbstractInstanceAccess() {
		return pAbstractInstance;
	}
	
	public ParserRule getAbstractInstanceRule() {
		return getAbstractInstanceAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
