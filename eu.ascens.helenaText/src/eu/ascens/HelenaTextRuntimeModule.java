/*
 * generated by Xtext
 */
package eu.ascens;

import org.eclipse.xtext.generator.IFilePostProcessor;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.scoping.IScopeProvider;

import com.google.inject.Binder;
import com.google.inject.Singleton;

import eu.ascens.formatting.JavaFormatterPostProcessor;
import eu.ascens.generator.CompositeHelenaTextGenerator;
import eu.ascens.generator.HelenaTextOutputConfigurationProvider;
import eu.ascens.scoping.HelenaTextScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class HelenaTextRuntimeModule extends
eu.ascens.AbstractHelenaTextRuntimeModule {

	//Bind generator
	@Override
	public Class<? extends IGenerator> bindIGenerator() {
		return CompositeHelenaTextGenerator.class;
	}

	@Override
	public void configure(Binder binder) {
		super.configure(binder);

		//bind src-gen/src-user settings
		binder.bind(IOutputConfigurationProvider.class)
				.to(HelenaTextOutputConfigurationProvider.class)
		.in(Singleton.class);

		//bind formatter
		binder.bind(IFilePostProcessor.class).to(
				JavaFormatterPostProcessor.class);

	}
	
	//Bind scoping provider (for scoping, linking, serialization)
	
	@Override
	public Class<? extends org.eclipse.xtext.scoping.IScopeProvider> bindIScopeProvider() {
		return HelenaTextScopeProvider.class;
	}
	@Override
	public void configureLinkingIScopeProvider(com.google.inject.Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(org.eclipse.xtext.linking.LinkingScopeProviderBinding.class).to(HelenaTextScopeProvider.class);
	}
	@Override
	public void configureSerializerIScopeProvider(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(org.eclipse.xtext.serializer.tokens.SerializerScopeProviderBinding.class).to(HelenaTextScopeProvider.class);
	}

}
